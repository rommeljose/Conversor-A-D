

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Jan 25 01:18:51 2021

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F25K20
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec,minocg
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1,minocg
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec,minocg
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1,minocg
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,minocg
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,minocg
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,minocg
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2,minocg
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,minocg
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,minocg
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,minocg
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2,minocg
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1,minocg
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1,minocg
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1,minocg
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,minocg
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,minocg
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,minocg
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,minocg
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,minocg
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,minocg
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,minocg
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,minocg
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,minocg
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1,minocg
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1,minocg
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1,minocg
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1,minocg
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1,minocg
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1,minocg
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,minocg
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1,minocg
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1,minocg
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1,minocg
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1,minocg
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1,minocg
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1,minocg
    45                           	psect	param0,global,class=BANK0,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 2.05
    49                           ; Generated 20/12/2018 GMT
    50                           ; 
    51                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F25K20 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	smallconst
    84  000600                     __psmallconst:
    85                           	opt callstack 0
    86  000600  00                 	db	0
    87  000601                     _dpowers:
    88                           	opt callstack 0
    89  000601  0001               	dw	1
    90  000603  0000               	dw	0
    91  000605  000A               	dw	10
    92  000607  0000               	dw	0
    93  000609  0064               	dw	100
    94  00060B  0000               	dw	0
    95  00060D  03E8               	dw	1000
    96  00060F  0000               	dw	0
    97  000611  2710               	dw	10000
    98  000613  0000               	dw	0
    99  000615  86A0               	dw	34464
   100  000617  0001               	dw	1
   101  000619  4240               	dw	16960
   102  00061B  000F               	dw	15
   103  00061D  9680               	dw	38528
   104  00061F  0098               	dw	152
   105  000621  E100               	dw	57600
   106  000623  05F5               	dw	1525
   107  000625  CA00               	dw	51712
   108  000627  3B9A               	dw	15258
   109  000629                     __end_of_dpowers:
   110                           	opt callstack 0
   111  000629                     _hexpowers:
   112                           	opt callstack 0
   113  000629  0001               	dw	1
   114  00062B  0000               	dw	0
   115  00062D  0010               	dw	16
   116  00062F  0000               	dw	0
   117  000631  0100               	dw	256
   118  000633  0000               	dw	0
   119  000635  1000               	dw	4096
   120  000637  0000               	dw	0
   121  000639  0000               	dw	0
   122  00063B  0001               	dw	1
   123  00063D  0000               	dw	0
   124  00063F  0010               	dw	16
   125  000641  0000               	dw	0
   126  000643  0100               	dw	256
   127  000645  0000               	dw	0
   128  000647  1000               	dw	4096
   129  000649                     __end_of_hexpowers:
   130                           	opt callstack 0
   131  000649                     STR_6:
   132                           
   133                           ; BSR set to: 0
   134  000649  30                 	db	48	;'0'
   135  00064A  31                 	db	49	;'1'
   136  00064B  32                 	db	50	;'2'
   137  00064C  33                 	db	51	;'3'
   138  00064D  34                 	db	52	;'4'
   139  00064E  35                 	db	53	;'5'
   140  00064F  36                 	db	54	;'6'
   141  000650  37                 	db	55	;'7'
   142  000651  38                 	db	56	;'8'
   143  000652  39                 	db	57	;'9'
   144  000653  41                 	db	65	;'A'
   145  000654  42                 	db	66	;'B'
   146  000655  43                 	db	67	;'C'
   147  000656  44                 	db	68	;'D'
   148  000657  45                 	db	69	;'E'
   149  000658  46                 	db	70	;'F'
   150  000659  00                 	db	0
   151  00065A                     STR_2:
   152                           
   153                           ; BSR set to: 0
   154  00065A  20                 	db	32
   155  00065B  20                 	db	32
   156  00065C  43                 	db	67	;'C'
   157  00065D  6F                 	db	111	;'o'
   158  00065E  6E                 	db	110	;'n'
   159  00065F  76                 	db	118	;'v'
   160  000660  65                 	db	101	;'e'
   161  000661  72                 	db	114	;'r'
   162  000662  73                 	db	115	;'s'
   163  000663  6F                 	db	111	;'o'
   164  000664  72                 	db	114	;'r'
   165  000665  20                 	db	32
   166  000666  41                 	db	65	;'A'
   167  000667  2F                 	db	47
   168  000668  44                 	db	68	;'D'
   169  000669  00                 	db	0
   170  00066A                     STR_3:
   171                           
   172                           ; BSR set to: 0
   173  00066A  20                 	db	32
   174  00066B  20                 	db	32
   175  00066C  20                 	db	32
   176  00066D  45                 	db	69	;'E'
   177  00066E  6E                 	db	110	;'n'
   178  00066F  65                 	db	101	;'e'
   179  000670  72                 	db	114	;'r'
   180  000671  6F                 	db	111	;'o'
   181  000672  2D                 	db	45
   182  000673  32                 	db	50	;'2'
   183  000674  30                 	db	48	;'0'
   184  000675  32                 	db	50	;'2'
   185  000676  30                 	db	48	;'0'
   186  000677  00                 	db	0
   187  000678                     
   188                           ; BSR set to: 0
   189  000678  25                 	db	37
   190  000679  6C                 	db	108	;'l'
   191  00067A  75                 	db	117	;'u'
   192  00067B  2E                 	db	46
   193  00067C  25                 	db	37
   194  00067D  34                 	db	52	;'4'
   195  00067E  2E                 	db	46
   196  00067F  33                 	db	51	;'3'
   197  000680  6C                 	db	108	;'l'
   198  000681  75                 	db	117	;'u'
   199  000682  00                 	db	0
   200  000683                     STR_1:
   201                           
   202                           ; BSR set to: 0
   203  000683  25                 	db	37
   204  000684  58                 	db	88	;'X'
   205  000685  0A                 	db	10
   206  000686  00                 	db	0
   207  0000                     
   208                           ; #config settings
   209  000687  00                 	db	0	; dummy byte at the end
   210  0000                     
   211                           	psect	nvBANK0
   212  0000C8                     __pnvBANK0:
   213                           	opt callstack 0
   214  0000C8                     _timer0ReloadVal:
   215                           	opt callstack 0
   216  0000C8                     	ds	1
   217  0000C9                     _eusartTxBufferRemaining:
   218                           	opt callstack 0
   219  0000C9                     	ds	1
   220  0000                     _LATAbits	set	3977
   221  0000                     _INTCON2bits	set	4081
   222  0000                     _WPUB	set	3964
   223  0000                     _ANSEL	set	3966
   224  0000                     _ANSELH	set	3967
   225  0000                     _TRISC	set	3988
   226  0000                     _TRISA	set	3986
   227  0000                     _LATC	set	3979
   228  0000                     _LATB	set	3978
   229  0000                     _LATA	set	3977
   230  0000                     _T0CONbits	set	4053
   231  0000                     _TMR0L	set	4054
   232  0000                     _TMR0H	set	4055
   233  0000                     _T0CON	set	4053
   234  0000                     _RCREG	set	4014
   235  0000                     _RCSTAbits	set	4011
   236  0000                     _TXREG	set	4013
   237  0000                     _SPBRGH	set	4016
   238  0000                     _SPBRG	set	4015
   239  0000                     _TXSTA	set	4012
   240  0000                     _RCSTA	set	4011
   241  0000                     _BAUDCON	set	4024
   242  0000                     _PIR1bits	set	3998
   243  0000                     _PIE1bits	set	3997
   244  0000                     _INTCONbits	set	4082
   245  0000                     _RCONbits	set	4048
   246  0000                     _OSCTUNE	set	3995
   247  0000                     _OSCCON	set	4051
   248  0000                     _ADCON0bits	set	4034
   249  0000                     _ADRESH	set	4036
   250  0000                     _ADRESL	set	4035
   251  0000                     _ADCON2	set	4032
   252  0000                     _ADCON1	set	4033
   253  0000                     _ADCON0	set	4034
   254  0000                     _TRISCbits	set	3988
   255  0000                     _TRISBbits	set	3987
   256  0000                     _TRISB	set	3987
   257  0000                     _PORTB	set	3969
   258  0000                     _LATCbits	set	3979
   259  0000                     _LATBbits	set	3978
   260                           
   261                           	psect	cinit
   262  001358                     __pcinit:
   263                           	opt callstack 0
   264  001358                     start_initialization:
   265                           	opt callstack 0
   266  001358                     __initialization:
   267                           	opt callstack 0
   268                           
   269                           ; Clear objects allocated to BANK0 (46 bytes)
   270  001358  EE00  F09A         	lfsr	0,__pbssBANK0
   271  00135C  0E2E               	movlw	46
   272  00135E                     clear_0:
   273  00135E  6AEE               	clrf	postinc0,c
   274  001360  06E8               	decf	wreg,f,c
   275  001362  E1FD               	bnz	clear_0
   276  001364                     end_of_initialization:
   277                           	opt callstack 0
   278  001364                     __end_of__initialization:
   279                           	opt callstack 0
   280  001364  9001               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   281  001366  9201               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   282  001368  0100               	movlb	0
   283  00136A  EFE5  F007         	goto	_main	;jump to C main() function
   284                           
   285                           	psect	bssBANK0
   286  00009A                     __pbssBANK0:
   287                           	opt callstack 0
   288  00009A                     _eusartTxBuffer:
   289                           	opt callstack 0
   290  00009A                     	ds	16
   291  0000AA                     _eusartRxBuffer:
   292                           	opt callstack 0
   293  0000AA                     	ds	8
   294  0000B2                     _eusartRxCount:
   295                           	opt callstack 0
   296  0000B2                     	ds	1
   297  0000B3                     _eusartRxTail:
   298                           	opt callstack 0
   299  0000B3                     	ds	1
   300  0000B4                     _eusartRxHead:
   301                           	opt callstack 0
   302  0000B4                     	ds	1
   303  0000B5                     _eusartTxTail:
   304                           	opt callstack 0
   305  0000B5                     	ds	1
   306  0000B6                     _eusartTxHead:
   307                           	opt callstack 0
   308  0000B6                     	ds	1
   309  0000B7                     ftoat_mio@buf:
   310                           	opt callstack 0
   311  0000B7                     	ds	17
   312                           
   313                           	psect	cstackBANK0
   314  000060                     __pcstackBANK0:
   315                           	opt callstack 0
   316  000060                     ??_INTERRUPT_InterruptManager:
   317  000060                     
   318                           ; 1 bytes @ 0x0
   319  000060                     	ds	2
   320  000062                     ??_SetDDRamAddr:
   321  000062                     ??_isdigit:
   322  000062                     ??_DelayPORXLCD:
   323  000062                     ??_DelayXLCD:
   324  000062                     ?_ADC_GetConversion:
   325                           	opt callstack 0
   326  000062                     ?___wmul:
   327                           	opt callstack 0
   328  000062                     ?___lldiv:
   329                           	opt callstack 0
   330  000062                     WriteDataXLCD@data:
   331                           	opt callstack 0
   332  000062                     EUSART_Read@readValue:
   333                           	opt callstack 0
   334  000062                     EUSART_Write@txData:
   335                           	opt callstack 0
   336  000062                     ___wmul@multiplier:
   337                           	opt callstack 0
   338  000062                     ___lldiv@dividend:
   339                           	opt callstack 0
   340                           
   341                           ; 4 bytes @ 0x2
   342  000062                     	ds	1
   343  000063                     WriteCmdXLCD@cmd:
   344                           	opt callstack 0
   345  000063                     putch@txData:
   346                           	opt callstack 0
   347  000063                     _isdigit$1860:
   348                           	opt callstack 0
   349  000063                     putrsXLCD@buffer:
   350                           	opt callstack 0
   351                           
   352                           ; 3 bytes @ 0x3
   353  000063                     	ds	1
   354  000064                     ??_ADC_GetConversion:
   355  000064                     isdigit@c:
   356                           	opt callstack 0
   357  000064                     ___wmul@multiplicand:
   358                           	opt callstack 0
   359                           
   360                           ; 2 bytes @ 0x4
   361  000064                     	ds	1
   362  000065                     SetDDRamAddr@DDaddr:
   363                           	opt callstack 0
   364                           
   365                           ; 1 bytes @ 0x5
   366  000065                     	ds	1
   367  000066                     ??_OpenXLCD:
   368  000066                     ??_saludo:
   369  000066                     ADC_GetConversion@channel:
   370                           	opt callstack 0
   371  000066                     ___wmul@product:
   372                           	opt callstack 0
   373  000066                     ___lldiv@divisor:
   374                           	opt callstack 0
   375                           
   376                           ; 4 bytes @ 0x6
   377  000066                     	ds	1
   378  000067                     OpenXLCD@lcdtype:
   379                           	opt callstack 0
   380                           
   381                           ; 1 bytes @ 0x7
   382  000067                     	ds	1
   383  000068                     
   384                           ; 1 bytes @ 0x8
   385  000068                     	ds	2
   386  00006A                     ___lldiv@quotient:
   387                           	opt callstack 0
   388                           
   389                           ; 4 bytes @ 0xA
   390  00006A                     	ds	4
   391  00006E                     ___lldiv@counter:
   392                           	opt callstack 0
   393                           
   394                           ; 1 bytes @ 0xE
   395  00006E                     	ds	1
   396  00006F                     ?___llmod:
   397                           	opt callstack 0
   398  00006F                     ___llmod@dividend:
   399                           	opt callstack 0
   400                           
   401                           ; 4 bytes @ 0xF
   402  00006F                     	ds	4
   403  000073                     ___llmod@divisor:
   404                           	opt callstack 0
   405                           
   406                           ; 4 bytes @ 0x13
   407  000073                     	ds	4
   408  000077                     ___llmod@counter:
   409                           	opt callstack 0
   410                           
   411                           ; 1 bytes @ 0x17
   412  000077                     	ds	1
   413  000078                     ?__doprnt:
   414                           	opt callstack 0
   415  000078                     __doprnt@pb:
   416                           	opt callstack 0
   417                           
   418                           ; 2 bytes @ 0x18
   419  000078                     	ds	2
   420  00007A                     __doprnt@f:
   421                           	opt callstack 0
   422                           
   423                           ; 2 bytes @ 0x1A
   424  00007A                     	ds	2
   425  00007C                     __doprnt@ap:
   426                           	opt callstack 0
   427                           
   428                           ; 2 bytes @ 0x1C
   429  00007C                     	ds	2
   430  00007E                     ??__doprnt:
   431                           
   432                           ; 1 bytes @ 0x1E
   433  00007E                     	ds	4
   434  000082                     __doprnt@idx:
   435                           	opt callstack 0
   436                           
   437                           ; 1 bytes @ 0x22
   438  000082                     	ds	1
   439  000083                     __doprnt@flag:
   440                           	opt callstack 0
   441                           
   442                           ; 1 bytes @ 0x23
   443  000083                     	ds	1
   444  000084                     __doprnt@val:
   445                           	opt callstack 0
   446                           
   447                           ; 4 bytes @ 0x24
   448  000084                     	ds	4
   449  000088                     __doprnt@width:
   450                           	opt callstack 0
   451                           
   452                           ; 2 bytes @ 0x28
   453  000088                     	ds	2
   454  00008A                     __doprnt@prec:
   455                           	opt callstack 0
   456                           
   457                           ; 2 bytes @ 0x2A
   458  00008A                     	ds	2
   459  00008C                     __doprnt@c:
   460                           	opt callstack 0
   461                           
   462                           ; 1 bytes @ 0x2C
   463  00008C                     	ds	1
   464  00008D                     ?_printf:
   465                           	opt callstack 0
   466  00008D                     printf@f:
   467                           	opt callstack 0
   468                           
   469                           ; 2 bytes @ 0x2D
   470  00008D                     	ds	4
   471  000091                     printf@ap:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x31
   475  000091                     	ds	2
   476  000093                     printf@pb:
   477                           	opt callstack 0
   478                           
   479                           ; 4 bytes @ 0x33
   480  000093                     	ds	4
   481  000097                     main@convertedValue:
   482                           	opt callstack 0
   483                           
   484                           ; 2 bytes @ 0x37
   485  000097                     	ds	2
   486  000099                     main@data:
   487                           	opt callstack 0
   488                           
   489                           ; 1 bytes @ 0x39
   490  000099                     	ds	1
   491                           
   492 ;;
   493 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   494 ;;
   495 ;; *************** function _main *****************
   496 ;; Defined at:
   497 ;;		line 57 in file "main.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;		None
   500 ;; Auto vars:     Size  Location     Type
   501 ;;  voltaje         3    0        float 
   502 ;;  convertedVal    2   55[BANK0 ] unsigned int 
   503 ;;  data            1   57[BANK0 ] unsigned char 
   504 ;;  rxData          1    0        volatile unsigned char 
   505 ;; Return value:  Size  Location     Type
   506 ;;                  1    wreg      void 
   507 ;; Registers used:
   508 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   509 ;; Tracked objects:
   510 ;;		On entry : 0/0
   511 ;;		On exit  : 0/0
   512 ;;		Unchanged: 0/0
   513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   514 ;;      Params:         0       0       0       0       0       0       0
   515 ;;      Locals:         0       3       0       0       0       0       0
   516 ;;      Temps:          0       0       0       0       0       0       0
   517 ;;      Totals:         0       3       0       0       0       0       0
   518 ;;Total ram usage:        3 bytes
   519 ;; Hardware stack levels required when called:    6
   520 ;; This function calls:
   521 ;;		_ADC_GetConversion
   522 ;;		_EUSART_Read
   523 ;;		_LCD_inicio
   524 ;;		_SYSTEM_Initialize
   525 ;;		_SetDDRamAddr
   526 ;;		_WriteDataXLCD
   527 ;;		_printf
   528 ;;		_saludo
   529 ;; This function is called by:
   530 ;;		Startup code after reset
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           	psect	text0
   535  000FCA                     __ptext0:
   536                           	opt callstack 0
   537  000FCA                     _main:
   538                           	opt callstack 25
   539                           
   540                           ;main.c: 61: volatile uint8_t rxData;;main.c: 64: SYSTEM_Initialize();
   541                           
   542                           ;incstack = 0
   543  000FCA  EC86  F009         	call	_SYSTEM_Initialize	;wreg free
   544                           
   545                           ;main.c: 68: float voltaje;;main.c: 70: LCD_inicio();
   546  000FCE  ECA0  F009         	call	_LCD_inicio	;wreg free
   547                           
   548                           ;main.c: 72: saludo();
   549  000FD2  ECBB  F006         	call	_saludo	;wreg free
   550                           
   551                           ;main.c: 77: (INTCONbits.GIE = 1);
   552  000FD6  8EF2               	bsf	4082,7,c	;volatile
   553                           
   554                           ;main.c: 83: (INTCONbits.PEIE = 1);
   555  000FD8  8CF2               	bsf	4082,6,c	;volatile
   556                           
   557                           ;main.c: 86: uint16_t convertedValue;;main.c: 87: uint8_t data = 700;
   558  000FDA  0EBC               	movlw	188
   559  000FDC  0100               	movlb	0	; force () banked
   560  000FDE  6F99               	movwf	main@data& (0+255),b
   561  000FE0                     l2351:
   562                           
   563                           ;main.c: 90: {;main.c: 93: convertedValue = ADC_GetConversion(channel_AN2);
   564  000FE0  0E02               	movlw	2
   565  000FE2  ECDF  F008         	call	_ADC_GetConversion
   566  000FE6  C062  F097         	movff	?_ADC_GetConversion,main@convertedValue
   567  000FEA  C063  F098         	movff	?_ADC_GetConversion+1,main@convertedValue+1
   568                           
   569                           ;main.c: 96: printf("%X\n", convertedValue);
   570  000FEE  0E83               	movlw	low STR_1
   571  000FF0  0100               	movlb	0	; force () banked
   572  000FF2  6F8D               	movwf	printf@f& (0+255),b
   573  000FF4  0E06               	movlw	high STR_1
   574  000FF6  6F8E               	movwf	(printf@f+1)& (0+255),b
   575  000FF8  C097  F08F         	movff	main@convertedValue,?_printf+2
   576  000FFC  C098  F090         	movff	main@convertedValue+1,?_printf+3
   577  001000  EC9F  F008         	call	_printf	;wreg free
   578                           
   579                           ;main.c: 100: SetDDRamAddr(0x40);
   580  001004  0E40               	movlw	64
   581  001006  ECB5  F007         	call	_SetDDRamAddr
   582                           
   583                           ;main.c: 102: if ((eusartRxCount)){
   584  00100A  0100               	movlb	0	; force () banked
   585  00100C  51B2               	movf	_eusartRxCount& (0+255),w,b	;volatile
   586  00100E  B4D8               	btfsc	status,2,c
   587  001010  D7E7               	goto	l2351
   588                           
   589                           ; BSR set to: 0
   590                           ;main.c: 103: data = EUSART_Read();
   591  001012  EC7E  F008         	call	_EUSART_Read	;wreg free
   592  001016  0100               	movlb	0	; force () banked
   593  001018  6F99               	movwf	main@data& (0+255),b
   594                           
   595                           ; BSR set to: 0
   596                           ;main.c: 105: WriteDataXLCD(data);
   597  00101A  0100               	movlb	0	; force () banked
   598  00101C  5199               	movf	main@data& (0+255),w,b
   599  00101E  EC3A  F008         	call	_WriteDataXLCD
   600  001022  D7DE               	goto	l2351
   601  001024                     __end_of_main:
   602                           	opt callstack 0
   603                           
   604 ;; *************** function _saludo *****************
   605 ;; Defined at:
   606 ;;		line 12 in file "Lib_mias_all/micelaneos.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;		None
   609 ;; Auto vars:     Size  Location     Type
   610 ;;		None
   611 ;; Return value:  Size  Location     Type
   612 ;;                  1    wreg      void 
   613 ;; Registers used:
   614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   620 ;;      Params:         0       0       0       0       0       0       0
   621 ;;      Locals:         0       0       0       0       0       0       0
   622 ;;      Temps:          0       2       0       0       0       0       0
   623 ;;      Totals:         0       2       0       0       0       0       0
   624 ;;Total ram usage:        2 bytes
   625 ;; Hardware stack levels used:    1
   626 ;; Hardware stack levels required when called:    5
   627 ;; This function calls:
   628 ;;		_BusyXLCD
   629 ;;		_SetDDRamAddr
   630 ;;		_WriteCmdXLCD
   631 ;;		_putrsXLCD
   632 ;; This function is called by:
   633 ;;		_main
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           	psect	text1
   638  000D76                     __ptext1:
   639                           	opt callstack 0
   640  000D76                     _saludo:
   641                           	opt callstack 25
   642                           
   643                           ;micelaneos.c: 13: while (BusyXLCD());
   644                           
   645                           ;incstack = 0
   646  000D76  ECFD  F008         	call	_BusyXLCD	;wreg free
   647  000D7A  0900               	iorlw	0
   648  000D7C  A4D8               	btfss	status,2,c
   649  000D7E  D7FB               	goto	_saludo
   650                           
   651                           ;micelaneos.c: 14: WriteCmdXLCD(0x01);
   652  000D80  0E01               	movlw	1
   653  000D82  EC12  F008         	call	_WriteCmdXLCD
   654  000D86                     l2311:
   655  000D86  ECFD  F008         	call	_BusyXLCD	;wreg free
   656  000D8A  0900               	iorlw	0
   657  000D8C  A4D8               	btfss	status,2,c
   658  000D8E  D7FB               	goto	l2311
   659                           
   660                           ;micelaneos.c: 17: SetDDRamAddr(0x80);
   661  000D90  0E80               	movlw	128
   662  000D92  ECB5  F007         	call	_SetDDRamAddr
   663  000D96                     l2315:
   664  000D96  ECFD  F008         	call	_BusyXLCD	;wreg free
   665  000D9A  0900               	iorlw	0
   666  000D9C  A4D8               	btfss	status,2,c
   667  000D9E  D7FB               	goto	l2315
   668                           
   669                           ;micelaneos.c: 20: putrsXLCD("  Conversor A/D");
   670  000DA0  0E5A               	movlw	low STR_2
   671  000DA2  0100               	movlb	0	; force () banked
   672  000DA4  6F63               	movwf	putrsXLCD@buffer& (0+255),b
   673  000DA6  0E06               	movlw	high STR_2
   674  000DA8  6F64               	movwf	(putrsXLCD@buffer+1)& (0+255),b
   675  000DAA  5163               	movf	putrsXLCD@buffer& (0+255),w,b
   676  000DAC  1164               	iorwf	(putrsXLCD@buffer+1)& (0+255),w,b
   677  000DAE  A4D8               	btfss	status,2,c
   678  000DB0  0E00               	movlw	low (__mediumconst shr (0+16))
   679  000DB2  6F65               	movwf	(putrsXLCD@buffer+2)& (0+255),b
   680  000DB4  EC82  F007         	call	_putrsXLCD	;wreg free
   681  000DB8                     l2319:
   682  000DB8  ECFD  F008         	call	_BusyXLCD	;wreg free
   683  000DBC  0900               	iorlw	0
   684  000DBE  A4D8               	btfss	status,2,c
   685  000DC0  D7FB               	goto	l2319
   686                           
   687                           ;micelaneos.c: 23: SetDDRamAddr(0xC0);
   688  000DC2  0EC0               	movlw	192
   689  000DC4  ECB5  F007         	call	_SetDDRamAddr
   690  000DC8                     l2323:
   691  000DC8  ECFD  F008         	call	_BusyXLCD	;wreg free
   692  000DCC  0900               	iorlw	0
   693  000DCE  A4D8               	btfss	status,2,c
   694  000DD0  D7FB               	goto	l2323
   695                           
   696                           ;micelaneos.c: 26: putrsXLCD("   Enero-2020");
   697  000DD2  0E6A               	movlw	low STR_3
   698  000DD4  0100               	movlb	0	; force () banked
   699  000DD6  6F63               	movwf	putrsXLCD@buffer& (0+255),b
   700  000DD8  0E06               	movlw	high STR_3
   701  000DDA  6F64               	movwf	(putrsXLCD@buffer+1)& (0+255),b
   702  000DDC  5163               	movf	putrsXLCD@buffer& (0+255),w,b
   703  000DDE  1164               	iorwf	(putrsXLCD@buffer+1)& (0+255),w,b
   704  000DE0  A4D8               	btfss	status,2,c
   705  000DE2  0E00               	movlw	low (__mediumconst shr (0+16))
   706  000DE4  6F65               	movwf	(putrsXLCD@buffer+2)& (0+255),b
   707  000DE6  EC82  F007         	call	_putrsXLCD	;wreg free
   708                           
   709                           ;micelaneos.c: 27: _delay((unsigned long)((1000)*(4000000/4000.0)));
   710  000DEA  0E06               	movlw	6
   711  000DEC  0100               	movlb	0	; force () banked
   712  000DEE  6F67               	movwf	(??_saludo+1)& (0+255),b
   713  000DF0  0E13               	movlw	19
   714  000DF2  6F66               	movwf	??_saludo& (0+255),b
   715  000DF4  0EAD               	movlw	173
   716  000DF6                     u1337:
   717  000DF6  2EE8               	decfsz	wreg,f,c
   718  000DF8  D7FE               	bra	u1337
   719  000DFA  2F66               	decfsz	??_saludo& (0+255),f,b
   720  000DFC  D7FC               	bra	u1337
   721  000DFE  2F67               	decfsz	(??_saludo+1)& (0+255),f,b
   722  000E00  D7FA               	bra	u1337
   723  000E02  F000 F000          	nop2	
   724  000E06                     l2329:
   725  000E06  ECFD  F008         	call	_BusyXLCD	;wreg free
   726  000E0A  0900               	iorlw	0
   727  000E0C  A4D8               	btfss	status,2,c
   728  000E0E  D7FB               	goto	l2329
   729                           
   730                           ;micelaneos.c: 30: WriteCmdXLCD(0x01);
   731  000E10  0E01               	movlw	1
   732  000E12  EC12  F008         	call	_WriteCmdXLCD
   733  000E16  0012               	return		;funcret
   734  000E18                     __end_of_saludo:
   735                           	opt callstack 0
   736                           
   737 ;; *************** function _putrsXLCD *****************
   738 ;; Defined at:
   739 ;;		line 16 in file "Lib_mias_all/Librerias_microchip/putrxlcd.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;  buffer          3    3[BANK0 ] PTR unsigned char 
   742 ;;		 -> STR_5(1), ftoat_mio@buf(17), STR_3(14), STR_2(16), 
   743 ;; Auto vars:     Size  Location     Type
   744 ;;		None
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   754 ;;      Params:         0       3       0       0       0       0       0
   755 ;;      Locals:         0       0       0       0       0       0       0
   756 ;;      Temps:          0       0       0       0       0       0       0
   757 ;;      Totals:         0       3       0       0       0       0       0
   758 ;;Total ram usage:        3 bytes
   759 ;; Hardware stack levels used:    1
   760 ;; Hardware stack levels required when called:    4
   761 ;; This function calls:
   762 ;;		_BusyXLCD
   763 ;;		_WriteDataXLCD
   764 ;; This function is called by:
   765 ;;		_saludo
   766 ;;		_escribe_float
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text2
   771  000F04                     __ptext2:
   772                           	opt callstack 0
   773  000F04                     _putrsXLCD:
   774                           	opt callstack 25
   775                           
   776                           ;putrxlcd.c: 18: while(*buffer)
   777                           
   778                           ;incstack = 0
   779  000F04  D01E               	goto	l2149
   780  000F06                     l2143:
   781  000F06  ECFD  F008         	call	_BusyXLCD	;wreg free
   782  000F0A  0900               	iorlw	0
   783  000F0C  A4D8               	btfss	status,2,c
   784  000F0E  D7FB               	goto	l2143
   785                           
   786                           ;putrxlcd.c: 21: WriteDataXLCD(*buffer);
   787  000F10  C063  FFF6         	movff	putrsXLCD@buffer,tblptrl
   788  000F14  C064  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
   789  000F18  C065  FFF8         	movff	putrsXLCD@buffer+2,tblptru
   790  000F1C  BAF8               	btfsc	tblptru,5,c
   791  000F1E  D003               	bra	u947
   792  000F20  0008               	tblrd		*
   793  000F22  50F5               	movf	tablat,w,c
   794  000F24  D005               	bra	u940
   795  000F26                     u947:
   796  000F26  CFF6 FFE9          	movff	tblptrl,fsr0l
   797  000F2A  CFF7 FFEA          	movff	tblptrh,fsr0h
   798  000F2E  50EF               	movf	indf0,w,c
   799  000F30                     u940:
   800  000F30  EC3A  F008         	call	_WriteDataXLCD
   801                           
   802                           ;putrxlcd.c: 22: buffer++;
   803  000F34  0100               	movlb	0	; force () banked
   804  000F36  0E01               	movlw	1
   805  000F38  2763               	addwf	putrsXLCD@buffer& (0+255),f,b
   806  000F3A  0E00               	movlw	0
   807  000F3C  2364               	addwfc	(putrsXLCD@buffer+1)& (0+255),f,b
   808  000F3E  0E00               	movlw	0
   809  000F40  2365               	addwfc	(putrsXLCD@buffer+2)& (0+255),f,b
   810  000F42                     l2149:
   811  000F42  C063  FFF6         	movff	putrsXLCD@buffer,tblptrl
   812  000F46  C064  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
   813  000F4A  C065  FFF8         	movff	putrsXLCD@buffer+2,tblptru
   814  000F4E  BAF8               	btfsc	tblptru,5,c
   815  000F50  D003               	bra	u957
   816  000F52  0008               	tblrd		*
   817  000F54  50F5               	movf	tablat,w,c
   818  000F56  D005               	bra	u950
   819  000F58                     u957:
   820  000F58  CFF6 FFE9          	movff	tblptrl,fsr0l
   821  000F5C  CFF7 FFEA          	movff	tblptrh,fsr0h
   822  000F60  50EF               	movf	indf0,w,c
   823  000F62                     u950:
   824  000F62  0900               	iorlw	0
   825  000F64  B4D8               	btfsc	status,2,c
   826  000F66  0012               	return	
   827  000F68  D7CE               	goto	l2143
   828  000F6A                     __end_of_putrsXLCD:
   829                           	opt callstack 0
   830                           
   831 ;; *************** function _WriteDataXLCD *****************
   832 ;; Defined at:
   833 ;;		line 16 in file "Lib_mias_all/Librerias_microchip/writdata.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;  data            1    wreg     unsigned char 
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  data            1    2[BANK0 ] unsigned char 
   838 ;; Return value:  Size  Location     Type
   839 ;;                  1    wreg      void 
   840 ;; Registers used:
   841 ;;		wreg, status,2, status,0, cstack
   842 ;; Tracked objects:
   843 ;;		On entry : 0/0
   844 ;;		On exit  : 0/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   847 ;;      Params:         0       0       0       0       0       0       0
   848 ;;      Locals:         0       1       0       0       0       0       0
   849 ;;      Temps:          0       0       0       0       0       0       0
   850 ;;      Totals:         0       1       0       0       0       0       0
   851 ;;Total ram usage:        1 bytes
   852 ;; Hardware stack levels used:    1
   853 ;; Hardware stack levels required when called:    3
   854 ;; This function calls:
   855 ;;		_DelayFor18TCY
   856 ;; This function is called by:
   857 ;;		_putrsXLCD
   858 ;;		_main
   859 ;;		_putsXLCD
   860 ;;		_eco
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           	psect	text3
   865  001074                     __ptext3:
   866                           	opt callstack 0
   867  001074                     _WriteDataXLCD:
   868                           	opt callstack 25
   869                           
   870                           ;incstack = 0
   871                           ;WriteDataXLCD@data stored from wreg
   872  001074  0100               	movlb	0	; force () banked
   873  001076  6F62               	movwf	WriteDataXLCD@data& (0+255),b
   874                           
   875                           ;writdata.c: 35: TRISB &= 0xf0;
   876  001078  0EF0               	movlw	240
   877  00107A  1693               	andwf	3987,f,c	;volatile
   878                           
   879                           ;writdata.c: 36: PORTB &= 0xf0;
   880  00107C  0EF0               	movlw	240
   881  00107E  1681               	andwf	3969,f,c	;volatile
   882                           
   883                           ;writdata.c: 37: PORTB |= ((data>>4)&0x0f);
   884  001080  0100               	movlb	0	; force () banked
   885  001082  3962               	swapf	WriteDataXLCD@data& (0+255),w,b
   886  001084  0B0F               	andlw	15
   887  001086  0B0F               	andlw	15
   888  001088  1281               	iorwf	3969,f,c	;volatile
   889                           
   890                           ; BSR set to: 0
   891                           ;writdata.c: 39: LATCbits.LATC0 = 1;
   892  00108A  808B               	bsf	3979,0,c	;volatile
   893                           
   894                           ; BSR set to: 0
   895                           ;writdata.c: 40: LATBbits.LATB5 = 0;
   896  00108C  9A8A               	bcf	3978,5,c	;volatile
   897                           
   898                           ; BSR set to: 0
   899                           ;writdata.c: 41: DelayFor18TCY();
   900  00108E  ECDD  F009         	call	_DelayFor18TCY	;wreg free
   901                           
   902                           ;writdata.c: 42: LATBbits.LATB6 = 1;
   903  001092  8C8A               	bsf	3978,6,c	;volatile
   904                           
   905                           ;writdata.c: 43: DelayFor18TCY();
   906  001094  ECDD  F009         	call	_DelayFor18TCY	;wreg free
   907                           
   908                           ;writdata.c: 44: LATBbits.LATB6 = 0;
   909  001098  9C8A               	bcf	3978,6,c	;volatile
   910                           
   911                           ;writdata.c: 49: PORTB &= 0xf0;
   912  00109A  0EF0               	movlw	240
   913  00109C  1681               	andwf	3969,f,c	;volatile
   914                           
   915                           ;writdata.c: 50: PORTB |= (data&0x0f);
   916  00109E  0100               	movlb	0	; force () banked
   917  0010A0  5162               	movf	WriteDataXLCD@data& (0+255),w,b
   918  0010A2  0B0F               	andlw	15
   919  0010A4  1281               	iorwf	3969,f,c	;volatile
   920                           
   921                           ; BSR set to: 0
   922                           ;writdata.c: 52: DelayFor18TCY();
   923  0010A6  ECDD  F009         	call	_DelayFor18TCY	;wreg free
   924                           
   925                           ;writdata.c: 53: LATBbits.LATB6 = 1;
   926  0010AA  8C8A               	bsf	3978,6,c	;volatile
   927                           
   928                           ;writdata.c: 54: DelayFor18TCY();
   929  0010AC  ECDD  F009         	call	_DelayFor18TCY	;wreg free
   930                           
   931                           ;writdata.c: 55: LATBbits.LATB6 = 0;
   932  0010B0  9C8A               	bcf	3978,6,c	;volatile
   933                           
   934                           ;writdata.c: 59: TRISB |= 0x0f;
   935  0010B2  0E0F               	movlw	15
   936  0010B4  1293               	iorwf	3987,f,c	;volatile
   937  0010B6  0012               	return		;funcret
   938  0010B8                     __end_of_WriteDataXLCD:
   939                           	opt callstack 0
   940                           
   941 ;; *************** function _printf *****************
   942 ;; Defined at:
   943 ;;		line 13 in file "D:\Programas_varios\Microchip\xc8\v2.05\pic\sources\c90\common\printf.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;  f               2   45[BANK0 ] PTR const unsigned char 
   946 ;;		 -> STR_1(4), 
   947 ;; Auto vars:     Size  Location     Type
   948 ;;  pb              4   51[BANK0 ] struct __prbuf
   949 ;;  ap              2   49[BANK0 ] PTR void [1]
   950 ;;		 -> ?_sprintf(2), ?_printf(2), 
   951 ;; Return value:  Size  Location     Type
   952 ;;                  2   45[BANK0 ] int 
   953 ;; Registers used:
   954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   955 ;; Tracked objects:
   956 ;;		On entry : 0/0
   957 ;;		On exit  : 0/0
   958 ;;		Unchanged: 0/0
   959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   960 ;;      Params:         0       4       0       0       0       0       0
   961 ;;      Locals:         0       6       0       0       0       0       0
   962 ;;      Temps:          0       0       0       0       0       0       0
   963 ;;      Totals:         0      10       0       0       0       0       0
   964 ;;Total ram usage:       10 bytes
   965 ;; Hardware stack levels used:    1
   966 ;; Hardware stack levels required when called:    5
   967 ;; This function calls:
   968 ;;		__doprnt
   969 ;; This function is called by:
   970 ;;		_main
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           	psect	text4
   975  00113E                     __ptext4:
   976                           	opt callstack 0
   977  00113E                     _printf:
   978                           	opt callstack 25
   979                           
   980                           ;incstack = 0
   981  00113E  0E00               	movlw	0
   982  001140  0100               	movlb	0	; () banked
   983  001142  6F93               	movwf	printf@pb& (0+255),b
   984  001144  0E00               	movlw	0
   985  001146  6F94               	movwf	(printf@pb+1)& (0+255),b
   986  001148  0EAC               	movlw	low _putch
   987  00114A  6F95               	movwf	(printf@pb+2)& (0+255),b
   988  00114C  0E13               	movlw	high _putch
   989  00114E  6F96               	movwf	(printf@pb+3)& (0+255),b
   990  001150  0E8F               	movlw	low (?_printf+2)
   991  001152  6F91               	movwf	printf@ap& (0+255),b
   992  001154  0E00               	movlw	high (?_printf+2)
   993  001156  6F92               	movwf	(printf@ap+1)& (0+255),b
   994                           
   995                           ; BSR set to: 0
   996  001158  0E93               	movlw	low printf@pb
   997  00115A  6F78               	movwf	__doprnt@pb& (0+255),b
   998  00115C  0E00               	movlw	high printf@pb
   999  00115E  6F79               	movwf	(__doprnt@pb+1)& (0+255),b
  1000  001160  C08D  F07A         	movff	printf@f,__doprnt@f
  1001  001164  C08E  F07B         	movff	printf@f+1,__doprnt@f+1
  1002  001168  0E91               	movlw	low printf@ap
  1003  00116A  6F7C               	movwf	__doprnt@ap& (0+255),b
  1004  00116C  0E00               	movlw	high printf@ap
  1005  00116E  6F7D               	movwf	(__doprnt@ap+1)& (0+255),b
  1006  001170  EC44  F003         	call	__doprnt	;wreg free
  1007  001174  C078  F08D         	movff	?__doprnt,?_printf
  1008  001178  C079  F08E         	movff	?__doprnt+1,?_printf+1
  1009  00117C  0012               	return		;funcret
  1010  00117E                     __end_of_printf:
  1011                           	opt callstack 0
  1012                           
  1013 ;; *************** function __doprnt *****************
  1014 ;; Defined at:
  1015 ;;		line 466 in file "D:\Programas_varios\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;  pb              2   24[BANK0 ] PTR struct __prbuf
  1018 ;;		 -> sprintf@pb(4), printf@pb(4), 
  1019 ;;  f               2   26[BANK0 ] PTR const unsigned char 
  1020 ;;		 -> STR_4(11), STR_1(4), 
  1021 ;;  ap              2   28[BANK0 ] PTR PTR void 
  1022 ;;		 -> sprintf@ap(2), printf@ap(2), 
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;  idx             1   34[BANK0 ] unsigned char 
  1025 ;;  val             4   36[BANK0 ] unsigned long 
  1026 ;;  tmpval          4    0        struct .
  1027 ;;  cp              3    0        PTR const unsigned char 
  1028 ;;  prec            2   42[BANK0 ] int 
  1029 ;;  width           2   40[BANK0 ] int 
  1030 ;;  len             2    0        unsigned int 
  1031 ;;  c               1   44[BANK0 ] unsigned char 
  1032 ;;  flag            1   35[BANK0 ] unsigned char 
  1033 ;; Return value:  Size  Location     Type
  1034 ;;                  2   24[BANK0 ] int 
  1035 ;; Registers used:
  1036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1037 ;; Tracked objects:
  1038 ;;		On entry : 0/0
  1039 ;;		On exit  : 0/0
  1040 ;;		Unchanged: 0/0
  1041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1042 ;;      Params:         0       6       0       0       0       0       0
  1043 ;;      Locals:         0      11       0       0       0       0       0
  1044 ;;      Temps:          0       4       0       0       0       0       0
  1045 ;;      Totals:         0      21       0       0       0       0       0
  1046 ;;Total ram usage:       21 bytes
  1047 ;; Hardware stack levels used:    1
  1048 ;; Hardware stack levels required when called:    4
  1049 ;; This function calls:
  1050 ;;		Absolute function
  1051 ;;		___lldiv
  1052 ;;		___llmod
  1053 ;;		___wmul
  1054 ;;		_isdigit
  1055 ;;		_putch
  1056 ;; This function is called by:
  1057 ;;		_printf
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           	psect	text5
  1062  000688                     __ptext5:
  1063                           	opt callstack 0
  1064  000688                     __doprnt:
  1065                           	opt callstack 25
  1066                           
  1067                           ;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 512: int prec;;doprnt.c: 520
      +                          : unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;doprnt.c: 
      +                          537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned long val;;doprnt.c: 
      +                          541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 548: while((c = *f++)) {
  1068                           
  1069                           ;incstack = 0
  1070  000688  D2F1               	goto	u1220
  1071  00068A                     l2153:
  1072                           
  1073                           ; BSR set to: 0
  1074                           ;doprnt.c: 550: if(c != '%')
  1075  00068A  0E25               	movlw	37
  1076  00068C  0100               	movlb	0	; force () banked
  1077  00068E  198C               	xorwf	__doprnt@c& (0+255),w,b
  1078  000690  B4D8               	btfsc	status,2,c
  1079  000692  D03A               	goto	l2163
  1080                           
  1081                           ; BSR set to: 0
  1082  000694  0100               	movlb	0	; force () banked
  1083  000696  EE20 F002          	lfsr	2,2
  1084  00069A  5178               	movf	__doprnt@pb& (0+255),w,b
  1085  00069C  26D9               	addwf	fsr2l,f,c
  1086  00069E  5179               	movf	(__doprnt@pb+1)& (0+255),w,b
  1087  0006A0  22DA               	addwfc	fsr2h,f,c
  1088  0006A2  50DE               	movf	postinc2,w,c
  1089  0006A4  10DE               	iorwf	postinc2,w,c
  1090  0006A6  B4D8               	btfsc	status,2,c
  1091  0006A8  D019               	goto	l2159
  1092                           
  1093                           ; BSR set to: 0
  1094  0006AA  0100               	movlb	0	; force () banked
  1095  0006AC  EE20 F002          	lfsr	2,2
  1096  0006B0  5178               	movf	__doprnt@pb& (0+255),w,b
  1097  0006B2  26D9               	addwf	fsr2l,f,c
  1098  0006B4  5179               	movf	(__doprnt@pb+1)& (0+255),w,b
  1099  0006B6  22DA               	addwfc	fsr2h,f,c
  1100  0006B8  CFDE F07E          	movff	postinc2,??__doprnt
  1101  0006BC  CFDD F07F          	movff	postdec2,??__doprnt+1
  1102  0006C0  D801               	call	u998
  1103  0006C2  D2D4               	goto	u1220
  1104  0006C4                     u998:
  1105  0006C4  0005               	push	
  1106  0006C6  6EFA               	movwf	pclath,c
  1107  0006C8  0100               	movlb	0	; force () banked
  1108  0006CA  517E               	movf	??__doprnt& (0+255),w,b
  1109  0006CC  6EFD               	movwf	tosl,c
  1110  0006CE  517F               	movf	(??__doprnt+1)& (0+255),w,b
  1111  0006D0  6EFE               	movwf	tosh,c
  1112  0006D2  6AFF               	clrf	tosu,c
  1113  0006D4  50FA               	movf	pclath,w,c
  1114  0006D6  0100               	movlb	0	; force () banked
  1115  0006D8  518C               	movf	__doprnt@c& (0+255),w,b
  1116  0006DA  0012               	return		;indir
  1117  0006DC                     l2159:
  1118                           
  1119                           ; BSR set to: 0
  1120  0006DC  C078  FFD9         	movff	__doprnt@pb,fsr2l
  1121  0006E0  C079  FFDA         	movff	__doprnt@pb+1,fsr2h
  1122  0006E4  CFDE F07E          	movff	postinc2,??__doprnt
  1123  0006E8  CFDD F07F          	movff	postdec2,??__doprnt+1
  1124  0006EC  C07E  FFD9         	movff	??__doprnt,fsr2l
  1125  0006F0  C07F  FFDA         	movff	??__doprnt+1,fsr2h
  1126  0006F4  C08C  FFDF         	movff	__doprnt@c,indf2
  1127                           
  1128                           ; BSR set to: 0
  1129  0006F8  C078  FFD9         	movff	__doprnt@pb,fsr2l
  1130  0006FC  C079  FFDA         	movff	__doprnt@pb+1,fsr2h
  1131  000700  2ADE               	incf	postinc2,f,c
  1132  000702  0E00               	movlw	0
  1133  000704  22DD               	addwfc	postdec2,f,c
  1134  000706  D2B2               	goto	u1220
  1135  000708                     l2163:
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  1139  000708  0E00               	movlw	0
  1140  00070A  0100               	movlb	0	; force () banked
  1141  00070C  6F89               	movwf	(__doprnt@width+1)& (0+255),b
  1142  00070E  0E00               	movlw	0
  1143  000710  6F88               	movwf	__doprnt@width& (0+255),b
  1144                           
  1145                           ;doprnt.c: 560: flag = 0;
  1146  000712  0E00               	movlw	0
  1147  000714  0100               	movlb	0	; force () banked
  1148  000716  6F83               	movwf	__doprnt@flag& (0+255),b
  1149                           
  1150                           ; BSR set to: 0
  1151                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  1152  000718  C07A  FFF6         	movff	__doprnt@f,tblptrl
  1153  00071C  C07B  FFF7         	movff	__doprnt@f+1,tblptrh
  1154  000720                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1155  000720  6AF8               	clrf	tblptru,c
  1156  000722                     	endif
  1157  000722                     	if	0	;tblptru may be non-zero
  1158  000722                     	endif
  1159  000722  0008               	tblrd		*
  1160  000724  50F5               	movf	tablat,w,c
  1161  000726  EC75  F009         	call	_isdigit
  1162  00072A  0100               	movlb	0	; force () banked
  1163  00072C  A0D8               	btfss	status,0,c
  1164  00072E  D03C               	goto	u1010
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;doprnt.c: 610: width = 0;
  1168  000730  0E00               	movlw	0
  1169  000732  0100               	movlb	0	; force () banked
  1170  000734  6F89               	movwf	(__doprnt@width+1)& (0+255),b
  1171  000736  0E00               	movlw	0
  1172  000738  6F88               	movwf	__doprnt@width& (0+255),b
  1173  00073A                     l2169:
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;doprnt.c: 612: width *= 10;
  1177  00073A  C088  F062         	movff	__doprnt@width,___wmul@multiplier
  1178  00073E  C089  F063         	movff	__doprnt@width+1,___wmul@multiplier+1
  1179  000742  0E00               	movlw	0
  1180  000744  0100               	movlb	0	; force () banked
  1181  000746  6F65               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1182  000748  0E0A               	movlw	10
  1183  00074A  6F64               	movwf	___wmul@multiplicand& (0+255),b
  1184  00074C  EC4E  F009         	call	___wmul	;wreg free
  1185  000750  C062  F088         	movff	?___wmul,__doprnt@width
  1186  000754  C063  F089         	movff	?___wmul+1,__doprnt@width+1
  1187                           
  1188                           ;doprnt.c: 613: width += *f++ - '0';
  1189  000758  0ED0               	movlw	208
  1190  00075A  0100               	movlb	0	; force () banked
  1191  00075C  6F7E               	movwf	??__doprnt& (0+255),b
  1192  00075E  0EFF               	movlw	255
  1193  000760  6F7F               	movwf	(??__doprnt+1)& (0+255),b
  1194  000762  C07A  FFF6         	movff	__doprnt@f,tblptrl
  1195  000766  C07B  FFF7         	movff	__doprnt@f+1,tblptrh
  1196  00076A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1197  00076A  6AF8               	clrf	tblptru,c
  1198  00076C                     	endif
  1199  00076C                     	if	0	;tblptru may be non-zero
  1200  00076C                     	endif
  1201  00076C  0008               	tblrd		*
  1202  00076E  50F5               	movf	tablat,w,c
  1203  000770  6F80               	movwf	(??__doprnt+2)& (0+255),b
  1204  000772  6B81               	clrf	(??__doprnt+3)& (0+255),b
  1205  000774  517E               	movf	??__doprnt& (0+255),w,b
  1206  000776  2780               	addwf	(??__doprnt+2)& (0+255),f,b
  1207  000778  517F               	movf	(??__doprnt+1)& (0+255),w,b
  1208  00077A  2381               	addwfc	(??__doprnt+3)& (0+255),f,b
  1209  00077C  5180               	movf	(??__doprnt+2)& (0+255),w,b
  1210  00077E  0100               	movlb	0	; force () banked
  1211  000780  2788               	addwf	__doprnt@width& (0+255),f,b
  1212  000782  0100               	movlb	0	; force () banked
  1213  000784  5181               	movf	(??__doprnt+3)& (0+255),w,b
  1214  000786  0100               	movlb	0	; force () banked
  1215  000788  2389               	addwfc	(__doprnt@width+1)& (0+255),f,b
  1216                           
  1217                           ; BSR set to: 0
  1218  00078A  0100               	movlb	0	; force () banked
  1219  00078C  4B7A               	infsnz	__doprnt@f& (0+255),f,b
  1220  00078E  2B7B               	incf	(__doprnt@f+1)& (0+255),f,b
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  1224  000790  C07A  FFF6         	movff	__doprnt@f,tblptrl
  1225  000794  C07B  FFF7         	movff	__doprnt@f+1,tblptrh
  1226  000798                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1227  000798  6AF8               	clrf	tblptru,c
  1228  00079A                     	endif
  1229  00079A                     	if	0	;tblptru may be non-zero
  1230  00079A                     	endif
  1231  00079A  0008               	tblrd		*
  1232  00079C  50F5               	movf	tablat,w,c
  1233  00079E  EC75  F009         	call	_isdigit
  1234  0007A2  0100               	movlb	0	; force () banked
  1235  0007A4  B0D8               	btfsc	status,0,c
  1236  0007A6  D7C9               	goto	l2169
  1237  0007A8                     u1010:
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  1241  0007A8  C07A  FFF6         	movff	__doprnt@f,tblptrl
  1242  0007AC  C07B  FFF7         	movff	__doprnt@f+1,tblptrh
  1243  0007B0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1244  0007B0  6AF8               	clrf	tblptru,c
  1245  0007B2                     	endif
  1246  0007B2                     	if	0	;tblptru may be non-zero
  1247  0007B2                     	endif
  1248  0007B2  0008               	tblrd		*
  1249  0007B4  50F5               	movf	tablat,w,c
  1250  0007B6  0A2E               	xorlw	46
  1251  0007B8  A4D8               	btfss	status,2,c
  1252  0007BA  D038               	goto	l2189
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;doprnt.c: 625: f++;
  1256  0007BC  0100               	movlb	0	; force () banked
  1257  0007BE  4B7A               	infsnz	__doprnt@f& (0+255),f,b
  1258  0007C0  2B7B               	incf	(__doprnt@f+1)& (0+255),f,b
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  1262  0007C2  0E00               	movlw	0
  1263  0007C4  0100               	movlb	0	; force () banked
  1264  0007C6  6F8B               	movwf	(__doprnt@prec+1)& (0+255),b
  1265  0007C8  0E00               	movlw	0
  1266  0007CA  6F8A               	movwf	__doprnt@prec& (0+255),b
  1267                           
  1268                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  1269  0007CC  D022               	goto	l2187
  1270  0007CE                     l2183:
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  1274  0007CE  C08A  F062         	movff	__doprnt@prec,___wmul@multiplier
  1275  0007D2  C08B  F063         	movff	__doprnt@prec+1,___wmul@multiplier+1
  1276  0007D6  0E00               	movlw	0
  1277  0007D8  0100               	movlb	0	; force () banked
  1278  0007DA  6F65               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1279  0007DC  0E0A               	movlw	10
  1280  0007DE  6F64               	movwf	___wmul@multiplicand& (0+255),b
  1281  0007E0  EC4E  F009         	call	___wmul	;wreg free
  1282  0007E4  C07A  FFF6         	movff	__doprnt@f,tblptrl
  1283  0007E8  C07B  FFF7         	movff	__doprnt@f+1,tblptrh
  1284  0007EC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1285  0007EC  6AF8               	clrf	tblptru,c
  1286  0007EE                     	endif
  1287  0007EE                     	if	0	;tblptru may be non-zero
  1288  0007EE                     	endif
  1289  0007EE  0008               	tblrd		*
  1290  0007F0  50F5               	movf	tablat,w,c
  1291  0007F2  0100               	movlb	0	; force () banked
  1292  0007F4  2762               	addwf	?___wmul& (0+255),f,b
  1293  0007F6  0E00               	movlw	0
  1294  0007F8  2363               	addwfc	(?___wmul+1)& (0+255),f,b
  1295  0007FA  0ED0               	movlw	208
  1296  0007FC  2562               	addwf	?___wmul& (0+255),w,b
  1297  0007FE  0100               	movlb	0	; force () banked
  1298  000800  6F8A               	movwf	__doprnt@prec& (0+255),b
  1299  000802  0EFF               	movlw	255
  1300  000804  0100               	movlb	0	; force () banked
  1301  000806  2163               	addwfc	(?___wmul+1)& (0+255),w,b
  1302  000808  0100               	movlb	0	; force () banked
  1303  00080A  6F8B               	movwf	(__doprnt@prec+1)& (0+255),b
  1304                           
  1305                           ; BSR set to: 0
  1306  00080C  0100               	movlb	0	; force () banked
  1307  00080E  4B7A               	infsnz	__doprnt@f& (0+255),f,b
  1308  000810  2B7B               	incf	(__doprnt@f+1)& (0+255),f,b
  1309  000812                     l2187:
  1310                           
  1311                           ; BSR set to: 0
  1312  000812  C07A  FFF6         	movff	__doprnt@f,tblptrl
  1313  000816  C07B  FFF7         	movff	__doprnt@f+1,tblptrh
  1314  00081A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1315  00081A  6AF8               	clrf	tblptru,c
  1316  00081C                     	endif
  1317  00081C                     	if	0	;tblptru may be non-zero
  1318  00081C                     	endif
  1319  00081C  0008               	tblrd		*
  1320  00081E  50F5               	movf	tablat,w,c
  1321  000820  EC75  F009         	call	_isdigit
  1322  000824  0100               	movlb	0	; force () banked
  1323  000826  A0D8               	btfss	status,0,c
  1324  000828  D011               	goto	l2199
  1325  00082A  D7D1               	goto	l2183
  1326  00082C                     l2189:
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;doprnt.c: 645: prec = 0;
  1330  00082C  0E00               	movlw	0
  1331  00082E  0100               	movlb	0	; force () banked
  1332  000830  6F8B               	movwf	(__doprnt@prec+1)& (0+255),b
  1333  000832  0E00               	movlw	0
  1334  000834  6F8A               	movwf	__doprnt@prec& (0+255),b
  1335  000836  D00A               	goto	l2199
  1336  000838                     l2191:
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;doprnt.c: 662: flag |= 0x10;
  1340  000838  0100               	movlb	0	; force () banked
  1341  00083A  8983               	bsf	__doprnt@flag& (0+255),4,b
  1342                           
  1343                           ;doprnt.c: 663: goto loop;
  1344  00083C  D007               	goto	l2199
  1345  00083E                     l2193:
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;doprnt.c: 737: case 'x':;doprnt.c: 740: flag |= 0x80;
  1349  00083E  0100               	movlb	0	; force () banked
  1350  000840  8F83               	bsf	__doprnt@flag& (0+255),7,b
  1351                           
  1352                           ;doprnt.c: 742: break;
  1353  000842  D021               	goto	l524
  1354  000844                     l2195:
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;doprnt.c: 837: flag |= 0xC0;
  1358  000844  0EC0               	movlw	192
  1359  000846  0100               	movlb	0	; force () banked
  1360  000848  1383               	iorwf	__doprnt@flag& (0+255),f,b
  1361                           
  1362                           ;doprnt.c: 838: break;
  1363  00084A  D01D               	goto	l524
  1364  00084C                     l2199:
  1365                           
  1366                           ; BSR set to: 0
  1367  00084C  C07A  FFF6         	movff	__doprnt@f,tblptrl
  1368  000850  C07B  FFF7         	movff	__doprnt@f+1,tblptrh
  1369  000854  0100               	movlb	0	; force () banked
  1370  000856  4B7A               	infsnz	__doprnt@f& (0+255),f,b
  1371  000858  2B7B               	incf	(__doprnt@f+1)& (0+255),f,b
  1372  00085A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1373  00085A  6AF8               	clrf	tblptru,c
  1374  00085C                     	endif
  1375  00085C                     	if	0	;tblptru may be non-zero
  1376  00085C                     	endif
  1377  00085C  0008               	tblrd		*
  1378  00085E  CFF5 F08C          	movff	tablat,__doprnt@c
  1379  000862  0100               	movlb	0	; force () banked
  1380  000864  518C               	movf	__doprnt@c& (0+255),w,b
  1381                           
  1382                           ; Switch size 1, requested type "simple"
  1383                           ; Number of cases is 5, Range of values is 0 to 120
  1384                           ; switch strategies available:
  1385                           ; Name         Instructions Cycles
  1386                           ; simple_byte           16     9 (average)
  1387                           ;	Chosen strategy is simple_byte
  1388  000866  0A00               	xorlw	0	; case 0
  1389  000868  B4D8               	btfsc	status,2,c
  1390  00086A  D20F               	goto	u1230
  1391  00086C  0A58               	xorlw	88	; case 88
  1392  00086E  B4D8               	btfsc	status,2,c
  1393  000870  D7E6               	goto	l2193
  1394  000872  0A34               	xorlw	52	; case 108
  1395  000874  B4D8               	btfsc	status,2,c
  1396  000876  D7E0               	goto	l2191
  1397  000878  0A19               	xorlw	25	; case 117
  1398  00087A  B4D8               	btfsc	status,2,c
  1399  00087C  D7E3               	goto	l2195
  1400  00087E  0A0D               	xorlw	13	; case 120
  1401  000880  B4D8               	btfsc	status,2,c
  1402  000882  D7DD               	goto	l2193
  1403  000884  D1F3               	goto	u1220
  1404  000886                     l524:
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  1408  000886  0100               	movlb	0	; force () banked
  1409  000888  A983               	btfss	__doprnt@flag& (0+255),4,b
  1410  00088A  D019               	goto	l2203
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  1414  00088C  C07C  FFD9         	movff	__doprnt@ap,fsr2l
  1415  000890  C07D  FFDA         	movff	__doprnt@ap+1,fsr2h
  1416  000894  CFDF F07E          	movff	indf2,??__doprnt
  1417  000898  0E04               	movlw	4
  1418  00089A  26DE               	addwf	postinc2,f,c
  1419  00089C  CFDF F07F          	movff	indf2,??__doprnt+1
  1420  0008A0  0E00               	movlw	0
  1421  0008A2  22DD               	addwfc	postdec2,f,c
  1422  0008A4  C07E  FFD9         	movff	??__doprnt,fsr2l
  1423  0008A8  C07F  FFDA         	movff	??__doprnt+1,fsr2h
  1424  0008AC  CFDE F084          	movff	postinc2,__doprnt@val
  1425  0008B0  CFDE F085          	movff	postinc2,__doprnt@val+1
  1426  0008B4  CFDE F086          	movff	postinc2,__doprnt@val+2
  1427  0008B8  CFDE F087          	movff	postinc2,__doprnt@val+3
  1428  0008BC  D01B               	goto	l2205
  1429  0008BE                     l2203:
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  1433  0008BE  C07C  FFD9         	movff	__doprnt@ap,fsr2l
  1434  0008C2  C07D  FFDA         	movff	__doprnt@ap+1,fsr2h
  1435  0008C6  CFDF F07E          	movff	indf2,??__doprnt
  1436  0008CA  0E02               	movlw	2
  1437  0008CC  26DE               	addwf	postinc2,f,c
  1438  0008CE  CFDF F07F          	movff	indf2,??__doprnt+1
  1439  0008D2  0E00               	movlw	0
  1440  0008D4  22DD               	addwfc	postdec2,f,c
  1441  0008D6  C07E  FFD9         	movff	??__doprnt,fsr2l
  1442  0008DA  C07F  FFDA         	movff	??__doprnt+1,fsr2h
  1443  0008DE  CFDE F080          	movff	postinc2,??__doprnt+2
  1444  0008E2  CFDD F081          	movff	postdec2,??__doprnt+3
  1445  0008E6  C080  F084         	movff	??__doprnt+2,__doprnt@val
  1446  0008EA  C081  F085         	movff	??__doprnt+3,__doprnt@val+1
  1447  0008EE  0100               	movlb	0	; force () banked
  1448  0008F0  6B86               	clrf	(__doprnt@val+2)& (0+255),b
  1449  0008F2  6B87               	clrf	(__doprnt@val+3)& (0+255),b
  1450  0008F4                     l2205:
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  1454  0008F4  0100               	movlb	0	; force () banked
  1455  0008F6  518A               	movf	__doprnt@prec& (0+255),w,b
  1456  0008F8  118B               	iorwf	(__doprnt@prec+1)& (0+255),w,b
  1457  0008FA  A4D8               	btfss	status,2,c
  1458  0008FC  D057               	goto	l2241
  1459                           
  1460                           ; BSR set to: 0
  1461  0008FE  0100               	movlb	0	; force () banked
  1462  000900  5184               	movf	__doprnt@val& (0+255),w,b
  1463  000902  1185               	iorwf	(__doprnt@val+1)& (0+255),w,b
  1464  000904  1186               	iorwf	(__doprnt@val+2)& (0+255),w,b
  1465  000906  1187               	iorwf	(__doprnt@val+3)& (0+255),w,b
  1466  000908  A4D8               	btfss	status,2,c
  1467  00090A  D050               	goto	l2241
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;doprnt.c: 1310: prec++;
  1471  00090C  0100               	movlb	0	; force () banked
  1472  00090E  4B8A               	infsnz	__doprnt@prec& (0+255),f,b
  1473  000910  2B8B               	incf	(__doprnt@prec+1)& (0+255),f,b
  1474  000912  D04C               	goto	l2241
  1475  000914                     l2211:
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1479  000914  0E01               	movlw	1
  1480  000916  0100               	movlb	0	; force () banked
  1481  000918  6F8C               	movwf	__doprnt@c& (0+255),b
  1482  00091A                     l2213:
  1483                           
  1484                           ; BSR set to: 0
  1485  00091A  0E0A               	movlw	10
  1486  00091C  0100               	movlb	0	; force () banked
  1487  00091E  198C               	xorwf	__doprnt@c& (0+255),w,b
  1488  000920  B4D8               	btfsc	status,2,c
  1489  000922  D04D               	goto	l2243
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;doprnt.c: 1325: if(val < dpowers[c])
  1493  000924  0100               	movlb	0	; force () banked
  1494  000926  518C               	movf	__doprnt@c& (0+255),w,b
  1495  000928  0D04               	mullw	4
  1496  00092A  0E01               	movlw	low _dpowers
  1497  00092C  24F3               	addwf	prodl,w,c
  1498  00092E  6EF6               	movwf	tblptrl,c
  1499  000930  0E06               	movlw	high _dpowers
  1500  000932  20F4               	addwfc	prodh,w,c
  1501  000934  6EF7               	movwf	tblptrh,c
  1502  000936                     	if	1	;There are 3 active tblptr bytes
  1503  000936  6AF8               	clrf	tblptru,c
  1504  000938  0E00               	movlw	low (__mediumconst shr (0+16))
  1505  00093A  22F8               	addwfc	tblptru,f,c
  1506  00093C                     	endif
  1507  00093C  0009               	tblrd		*+
  1508  00093E  50F5               	movf	tablat,w,c
  1509  000940  0100               	movlb	0	; force () banked
  1510  000942  5D84               	subwf	__doprnt@val& (0+255),w,b
  1511  000944  0009               	tblrd		*+
  1512  000946  50F5               	movf	tablat,w,c
  1513  000948  5985               	subwfb	(__doprnt@val+1)& (0+255),w,b
  1514  00094A  0009               	tblrd		*+
  1515  00094C  50F5               	movf	tablat,w,c
  1516  00094E  5986               	subwfb	(__doprnt@val+2)& (0+255),w,b
  1517  000950  0009               	tblrd		*+
  1518  000952  50F5               	movf	tablat,w,c
  1519  000954  5987               	subwfb	(__doprnt@val+3)& (0+255),w,b
  1520  000956  A0D8               	btfss	status,0,c
  1521  000958  D032               	goto	l2243
  1522                           
  1523                           ; BSR set to: 0
  1524  00095A  0100               	movlb	0	; force () banked
  1525  00095C  2B8C               	incf	__doprnt@c& (0+255),f,b
  1526  00095E  D7DD               	goto	l2213
  1527  000960                     l2225:
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1531  000960  0E01               	movlw	1
  1532  000962  0100               	movlb	0	; force () banked
  1533  000964  6F8C               	movwf	__doprnt@c& (0+255),b
  1534  000966                     l2227:
  1535                           
  1536                           ; BSR set to: 0
  1537  000966  0E08               	movlw	8
  1538  000968  0100               	movlb	0	; force () banked
  1539  00096A  198C               	xorwf	__doprnt@c& (0+255),w,b
  1540  00096C  B4D8               	btfsc	status,2,c
  1541  00096E  D027               	goto	l2243
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;doprnt.c: 1336: if(val < hexpowers[c])
  1545  000970  0100               	movlb	0	; force () banked
  1546  000972  518C               	movf	__doprnt@c& (0+255),w,b
  1547  000974  0D04               	mullw	4
  1548  000976  0E29               	movlw	low _hexpowers
  1549  000978  24F3               	addwf	prodl,w,c
  1550  00097A  6EF6               	movwf	tblptrl,c
  1551  00097C  0E06               	movlw	high _hexpowers
  1552  00097E  20F4               	addwfc	prodh,w,c
  1553  000980  6EF7               	movwf	tblptrh,c
  1554  000982                     	if	1	;There are 3 active tblptr bytes
  1555  000982  6AF8               	clrf	tblptru,c
  1556  000984  0E00               	movlw	low (__mediumconst shr (0+16))
  1557  000986  22F8               	addwfc	tblptru,f,c
  1558  000988                     	endif
  1559  000988  0009               	tblrd		*+
  1560  00098A  50F5               	movf	tablat,w,c
  1561  00098C  0100               	movlb	0	; force () banked
  1562  00098E  5D84               	subwf	__doprnt@val& (0+255),w,b
  1563  000990  0009               	tblrd		*+
  1564  000992  50F5               	movf	tablat,w,c
  1565  000994  5985               	subwfb	(__doprnt@val+1)& (0+255),w,b
  1566  000996  0009               	tblrd		*+
  1567  000998  50F5               	movf	tablat,w,c
  1568  00099A  5986               	subwfb	(__doprnt@val+2)& (0+255),w,b
  1569  00099C  0009               	tblrd		*+
  1570  00099E  50F5               	movf	tablat,w,c
  1571  0009A0  5987               	subwfb	(__doprnt@val+3)& (0+255),w,b
  1572  0009A2  A0D8               	btfss	status,0,c
  1573  0009A4  D00C               	goto	l2243
  1574                           
  1575                           ; BSR set to: 0
  1576  0009A6  0100               	movlb	0	; force () banked
  1577  0009A8  2B8C               	incf	__doprnt@c& (0+255),f,b
  1578  0009AA  D7DD               	goto	l2227
  1579  0009AC                     l2241:
  1580                           
  1581                           ; BSR set to: 0
  1582  0009AC  0100               	movlb	0	; force () banked
  1583  0009AE  5183               	movf	__doprnt@flag& (0+255),w,b
  1584  0009B0  0BC0               	andlw	192
  1585                           
  1586                           ; Switch size 1, requested type "simple"
  1587                           ; Number of cases is 2, Range of values is 128 to 192
  1588                           ; switch strategies available:
  1589                           ; Name         Instructions Cycles
  1590                           ; simple_byte            7     4 (average)
  1591                           ;	Chosen strategy is simple_byte
  1592  0009B2  0A80               	xorlw	128	; case 128
  1593  0009B4  B4D8               	btfsc	status,2,c
  1594  0009B6  D7D4               	goto	l2225
  1595  0009B8  0A40               	xorlw	64	; case 192
  1596  0009BA  B4D8               	btfsc	status,2,c
  1597  0009BC  D7AB               	goto	l2211
  1598  0009BE                     l2243:
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;doprnt.c: 1358: if(c < prec)
  1602  0009BE  0100               	movlb	0	; force () banked
  1603  0009C0  518C               	movf	__doprnt@c& (0+255),w,b
  1604  0009C2  0100               	movlb	0	; force () banked
  1605  0009C4  6F7E               	movwf	??__doprnt& (0+255),b
  1606  0009C6  6B7F               	clrf	(??__doprnt+1)& (0+255),b
  1607  0009C8  0100               	movlb	0	; force () banked
  1608  0009CA  518A               	movf	__doprnt@prec& (0+255),w,b
  1609  0009CC  0100               	movlb	0	; force () banked
  1610  0009CE  5D7E               	subwf	??__doprnt& (0+255),w,b
  1611  0009D0  517F               	movf	(??__doprnt+1)& (0+255),w,b
  1612  0009D2  0A80               	xorlw	128
  1613  0009D4  6F80               	movwf	(??__doprnt+2)& (0+255),b
  1614  0009D6  0100               	movlb	0	; force () banked
  1615  0009D8  518B               	movf	(__doprnt@prec+1)& (0+255),w,b
  1616  0009DA  0A80               	xorlw	128
  1617  0009DC  0100               	movlb	0	; force () banked
  1618  0009DE  5980               	subwfb	(??__doprnt+2)& (0+255),w,b
  1619  0009E0  B0D8               	btfsc	status,0,c
  1620  0009E2  D003               	goto	l2247
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;doprnt.c: 1359: c = prec;
  1624  0009E4  C08A  F08C         	movff	__doprnt@prec,__doprnt@c
  1625  0009E8  D015               	goto	l2251
  1626  0009EA                     l2247:
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;doprnt.c: 1360: else if(prec < c)
  1630  0009EA  0100               	movlb	0	; force () banked
  1631  0009EC  518C               	movf	__doprnt@c& (0+255),w,b
  1632  0009EE  0100               	movlb	0	; force () banked
  1633  0009F0  6F7E               	movwf	??__doprnt& (0+255),b
  1634  0009F2  6B7F               	clrf	(??__doprnt+1)& (0+255),b
  1635  0009F4  517E               	movf	??__doprnt& (0+255),w,b
  1636  0009F6  0100               	movlb	0	; force () banked
  1637  0009F8  5D8A               	subwf	__doprnt@prec& (0+255),w,b
  1638  0009FA  518B               	movf	(__doprnt@prec+1)& (0+255),w,b
  1639  0009FC  0A80               	xorlw	128
  1640  0009FE  0100               	movlb	0	; force () banked
  1641  000A00  6F80               	movwf	(??__doprnt+2)& (0+255),b
  1642  000A02  517F               	movf	(??__doprnt+1)& (0+255),w,b
  1643  000A04  0A80               	xorlw	128
  1644  000A06  5980               	subwfb	(??__doprnt+2)& (0+255),w,b
  1645  000A08  B0D8               	btfsc	status,0,c
  1646  000A0A  D004               	goto	l2251
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;doprnt.c: 1361: prec = c;
  1650  000A0C  C08C  F08A         	movff	__doprnt@c,__doprnt@prec
  1651  000A10  0100               	movlb	0	; force () banked
  1652  000A12  6B8B               	clrf	(__doprnt@prec+1)& (0+255),b
  1653  000A14                     l2251:
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;doprnt.c: 1400: if(width > c)
  1657  000A14  0100               	movlb	0	; force () banked
  1658  000A16  518C               	movf	__doprnt@c& (0+255),w,b
  1659  000A18  0100               	movlb	0	; force () banked
  1660  000A1A  6F7E               	movwf	??__doprnt& (0+255),b
  1661  000A1C  6B7F               	clrf	(??__doprnt+1)& (0+255),b
  1662  000A1E  0100               	movlb	0	; force () banked
  1663  000A20  5188               	movf	__doprnt@width& (0+255),w,b
  1664  000A22  0100               	movlb	0	; force () banked
  1665  000A24  5D7E               	subwf	??__doprnt& (0+255),w,b
  1666  000A26  517F               	movf	(??__doprnt+1)& (0+255),w,b
  1667  000A28  0A80               	xorlw	128
  1668  000A2A  6F80               	movwf	(??__doprnt+2)& (0+255),b
  1669  000A2C  0100               	movlb	0	; force () banked
  1670  000A2E  5189               	movf	(__doprnt@width+1)& (0+255),w,b
  1671  000A30  0A80               	xorlw	128
  1672  000A32  0100               	movlb	0	; force () banked
  1673  000A34  5980               	subwfb	(??__doprnt+2)& (0+255),w,b
  1674  000A36  B0D8               	btfsc	status,0,c
  1675  000A38  D007               	goto	l2255
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;doprnt.c: 1401: width -= c;
  1679  000A3A  0100               	movlb	0	; force () banked
  1680  000A3C  518C               	movf	__doprnt@c& (0+255),w,b
  1681  000A3E  0100               	movlb	0	; force () banked
  1682  000A40  5F88               	subwf	__doprnt@width& (0+255),f,b
  1683  000A42  0E00               	movlw	0
  1684  000A44  5B89               	subwfb	(__doprnt@width+1)& (0+255),f,b
  1685  000A46  D005               	goto	l2257
  1686  000A48                     l2255:
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  1690  000A48  0E00               	movlw	0
  1691  000A4A  0100               	movlb	0	; force () banked
  1692  000A4C  6F89               	movwf	(__doprnt@width+1)& (0+255),b
  1693  000A4E  0E00               	movlw	0
  1694  000A50  6F88               	movwf	__doprnt@width& (0+255),b
  1695  000A52                     l2257:
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  1699  000A52  0100               	movlb	0	; force () banked
  1700  000A54  5188               	movf	__doprnt@width& (0+255),w,b
  1701  000A56  1189               	iorwf	(__doprnt@width+1)& (0+255),w,b
  1702  000A58  B4D8               	btfsc	status,2,c
  1703  000A5A  D0FF               	goto	l2287
  1704                           
  1705                           ; BSR set to: 0
  1706  000A5C  0100               	movlb	0	; force () banked
  1707  000A5E  EE20 F002          	lfsr	2,2
  1708  000A62  5178               	movf	__doprnt@pb& (0+255),w,b
  1709  000A64  26D9               	addwf	fsr2l,f,c
  1710  000A66  5179               	movf	(__doprnt@pb+1)& (0+255),w,b
  1711  000A68  22DA               	addwfc	fsr2h,f,c
  1712  000A6A  50DE               	movf	postinc2,w,c
  1713  000A6C  10DE               	iorwf	postinc2,w,c
  1714  000A6E  B4D8               	btfsc	status,2,c
  1715  000A70  D018               	goto	l2263
  1716                           
  1717                           ; BSR set to: 0
  1718  000A72  0100               	movlb	0	; force () banked
  1719  000A74  EE20 F002          	lfsr	2,2
  1720  000A78  5178               	movf	__doprnt@pb& (0+255),w,b
  1721  000A7A  26D9               	addwf	fsr2l,f,c
  1722  000A7C  5179               	movf	(__doprnt@pb+1)& (0+255),w,b
  1723  000A7E  22DA               	addwfc	fsr2h,f,c
  1724  000A80  CFDE F07E          	movff	postinc2,??__doprnt
  1725  000A84  CFDD F07F          	movff	postdec2,??__doprnt+1
  1726  000A88  D801               	call	u1188
  1727  000A8A  D020               	goto	l2267
  1728  000A8C                     u1188:
  1729  000A8C  0005               	push	
  1730  000A8E  6EFA               	movwf	pclath,c
  1731  000A90  0100               	movlb	0	; force () banked
  1732  000A92  517E               	movf	??__doprnt& (0+255),w,b
  1733  000A94  6EFD               	movwf	tosl,c
  1734  000A96  517F               	movf	(??__doprnt+1)& (0+255),w,b
  1735  000A98  6EFE               	movwf	tosh,c
  1736  000A9A  6AFF               	clrf	tosu,c
  1737  000A9C  50FA               	movf	pclath,w,c
  1738  000A9E  0E20               	movlw	32
  1739  000AA0  0012               	return		;indir
  1740  000AA2                     l2263:
  1741                           
  1742                           ; BSR set to: 0
  1743  000AA2  C078  FFD9         	movff	__doprnt@pb,fsr2l
  1744  000AA6  C079  FFDA         	movff	__doprnt@pb+1,fsr2h
  1745  000AAA  CFDE F07E          	movff	postinc2,??__doprnt
  1746  000AAE  CFDD F07F          	movff	postdec2,??__doprnt+1
  1747  000AB2  C07E  FFD9         	movff	??__doprnt,fsr2l
  1748  000AB6  C07F  FFDA         	movff	??__doprnt+1,fsr2h
  1749  000ABA  0E20               	movlw	32
  1750  000ABC  6EDF               	movwf	indf2,c
  1751                           
  1752                           ; BSR set to: 0
  1753  000ABE  C078  FFD9         	movff	__doprnt@pb,fsr2l
  1754  000AC2  C079  FFDA         	movff	__doprnt@pb+1,fsr2h
  1755  000AC6  2ADE               	incf	postinc2,f,c
  1756  000AC8  0E00               	movlw	0
  1757  000ACA  22DD               	addwfc	postdec2,f,c
  1758  000ACC                     l2267:
  1759                           
  1760                           ;doprnt.c: 1450: while(--width);
  1761  000ACC  0100               	movlb	0	; force () banked
  1762  000ACE  0788               	decf	__doprnt@width& (0+255),f,b
  1763  000AD0  A0D8               	btfss	status,0,c
  1764  000AD2  0789               	decf	(__doprnt@width+1)& (0+255),f,b
  1765  000AD4  D7BF               	goto	L1
  1766  000AD6                     l2269:
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  1770  000AD6  C08A  F07E         	movff	__doprnt@prec,??__doprnt
  1771  000ADA  C08B  F07F         	movff	__doprnt@prec+1,??__doprnt+1
  1772  000ADE  0100               	movlb	0	; force () banked
  1773  000AE0  90D8               	bcf	status,0,c
  1774  000AE2  377E               	rlcf	??__doprnt& (0+255),f,b
  1775  000AE4  377F               	rlcf	(??__doprnt+1)& (0+255),f,b
  1776  000AE6  90D8               	bcf	status,0,c
  1777  000AE8  377E               	rlcf	??__doprnt& (0+255),f,b
  1778  000AEA  377F               	rlcf	(??__doprnt+1)& (0+255),f,b
  1779  000AEC  0E01               	movlw	low _dpowers
  1780  000AEE  257E               	addwf	??__doprnt& (0+255),w,b
  1781  000AF0  6EF6               	movwf	tblptrl,c
  1782  000AF2  0E06               	movlw	high _dpowers
  1783  000AF4  217F               	addwfc	(??__doprnt+1)& (0+255),w,b
  1784  000AF6  6EF7               	movwf	tblptrh,c
  1785  000AF8                     	if	1	;There are 3 active tblptr bytes
  1786  000AF8  6AF8               	clrf	tblptru,c
  1787  000AFA  0E00               	movlw	low (__mediumconst shr (0+16))
  1788  000AFC  22F8               	addwfc	tblptru,f,c
  1789  000AFE                     	endif
  1790  000AFE  0009               	tblrd		*+
  1791  000B00  CFF5 F066          	movff	tablat,___lldiv@divisor
  1792  000B04  0009               	tblrd		*+
  1793  000B06  CFF5 F067          	movff	tablat,___lldiv@divisor+1
  1794  000B0A  0009               	tblrd		*+
  1795  000B0C  CFF5 F068          	movff	tablat,___lldiv@divisor+2
  1796  000B10  000A               	tblrd		*-
  1797  000B12  CFF5 F069          	movff	tablat,___lldiv@divisor+3
  1798  000B16  C084  F062         	movff	__doprnt@val,___lldiv@dividend
  1799  000B1A  C085  F063         	movff	__doprnt@val+1,___lldiv@dividend+1
  1800  000B1E  C086  F064         	movff	__doprnt@val+2,___lldiv@dividend+2
  1801  000B22  C087  F065         	movff	__doprnt@val+3,___lldiv@dividend+3
  1802  000B26  EC0C  F007         	call	___lldiv
  1803  000B2A  C062  F06F         	movff	?___lldiv,___llmod@dividend
  1804  000B2E  C063  F070         	movff	?___lldiv+1,___llmod@dividend+1
  1805  000B32  C064  F071         	movff	?___lldiv+2,___llmod@dividend+2
  1806  000B36  C065  F072         	movff	?___lldiv+3,___llmod@dividend+3
  1807  000B3A  0E0A               	movlw	10
  1808  000B3C  0100               	movlb	0	; force () banked
  1809  000B3E  6F73               	movwf	___llmod@divisor& (0+255),b
  1810  000B40  0E00               	movlw	0
  1811  000B42  6F74               	movwf	(___llmod@divisor+1)& (0+255),b
  1812  000B44  0E00               	movlw	0
  1813  000B46  6F75               	movwf	(___llmod@divisor+2)& (0+255),b
  1814  000B48  0E00               	movlw	0
  1815  000B4A  6F76               	movwf	(___llmod@divisor+3)& (0+255),b
  1816  000B4C  EC4E  F007         	call	___llmod	;wreg free
  1817  000B50  0100               	movlb	0	; force () banked
  1818  000B52  516F               	movf	?___llmod& (0+255),w,b
  1819  000B54  0F30               	addlw	48
  1820  000B56  0100               	movlb	0	; force () banked
  1821  000B58  6F8C               	movwf	__doprnt@c& (0+255),b
  1822                           
  1823                           ;doprnt.c: 1510: break;
  1824  000B5A  D046               	goto	l2279
  1825  000B5C                     l2271:
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;doprnt.c: 1518: {;doprnt.c: 1519: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1829  000B5C  C084  F062         	movff	__doprnt@val,___lldiv@dividend
  1830  000B60  C085  F063         	movff	__doprnt@val+1,___lldiv@dividend+1
  1831  000B64  C086  F064         	movff	__doprnt@val+2,___lldiv@dividend+2
  1832  000B68  C087  F065         	movff	__doprnt@val+3,___lldiv@dividend+3
  1833  000B6C  C08A  F07E         	movff	__doprnt@prec,??__doprnt
  1834  000B70  C08B  F07F         	movff	__doprnt@prec+1,??__doprnt+1
  1835  000B74  0100               	movlb	0	; force () banked
  1836  000B76  90D8               	bcf	status,0,c
  1837  000B78  377E               	rlcf	??__doprnt& (0+255),f,b
  1838  000B7A  377F               	rlcf	(??__doprnt+1)& (0+255),f,b
  1839  000B7C  90D8               	bcf	status,0,c
  1840  000B7E  377E               	rlcf	??__doprnt& (0+255),f,b
  1841  000B80  377F               	rlcf	(??__doprnt+1)& (0+255),f,b
  1842  000B82  0E29               	movlw	low _hexpowers
  1843  000B84  257E               	addwf	??__doprnt& (0+255),w,b
  1844  000B86  6EF6               	movwf	tblptrl,c
  1845  000B88  0E06               	movlw	high _hexpowers
  1846  000B8A  217F               	addwfc	(??__doprnt+1)& (0+255),w,b
  1847  000B8C  6EF7               	movwf	tblptrh,c
  1848  000B8E                     	if	1	;There are 3 active tblptr bytes
  1849  000B8E  6AF8               	clrf	tblptru,c
  1850  000B90  0E00               	movlw	low (__mediumconst shr (0+16))
  1851  000B92  22F8               	addwfc	tblptru,f,c
  1852  000B94                     	endif
  1853  000B94  0009               	tblrd		*+
  1854  000B96  CFF5 F066          	movff	tablat,___lldiv@divisor
  1855  000B9A  0009               	tblrd		*+
  1856  000B9C  CFF5 F067          	movff	tablat,___lldiv@divisor+1
  1857  000BA0  0009               	tblrd		*+
  1858  000BA2  CFF5 F068          	movff	tablat,___lldiv@divisor+2
  1859  000BA6  000A               	tblrd		*-
  1860  000BA8  CFF5 F069          	movff	tablat,___lldiv@divisor+3
  1861  000BAC  EC0C  F007         	call	___lldiv	;wreg free
  1862  000BB0  0100               	movlb	0	; force () banked
  1863  000BB2  5162               	movf	?___lldiv& (0+255),w,b
  1864  000BB4  0B0F               	andlw	15
  1865  000BB6  0100               	movlb	0	; force () banked
  1866  000BB8  6F82               	movwf	__doprnt@idx& (0+255),b
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;doprnt.c: 1523: c = "0123456789ABCDEF"[idx];
  1870  000BBA  0E49               	movlw	low STR_6
  1871  000BBC  0100               	movlb	0	; force () banked
  1872  000BBE  2582               	addwf	__doprnt@idx& (0+255),w,b
  1873  000BC0  6EF6               	movwf	tblptrl,c
  1874  000BC2  6AF7               	clrf	tblptrh,c
  1875  000BC4  0E06               	movlw	high STR_6
  1876  000BC6  22F7               	addwfc	tblptrh,f,c
  1877  000BC8                     	if	1	;There are 3 active tblptr bytes
  1878  000BC8  6AF8               	clrf	tblptru,c
  1879  000BCA  0E00               	movlw	low (__mediumconst shr (0+16))
  1880  000BCC  22F8               	addwfc	tblptru,f,c
  1881  000BCE                     	endif
  1882  000BCE  0008               	tblrd		*
  1883  000BD0  CFF5 F08C          	movff	tablat,__doprnt@c
  1884                           
  1885                           ;doprnt.c: 1527: };doprnt.c: 1529: break;
  1886  000BD4  D009               	goto	l2279
  1887  000BD6                     l2277:
  1888                           
  1889                           ; BSR set to: 0
  1890  000BD6  0100               	movlb	0	; force () banked
  1891  000BD8  5183               	movf	__doprnt@flag& (0+255),w,b
  1892  000BDA  0BC0               	andlw	192
  1893                           
  1894                           ; Switch size 1, requested type "simple"
  1895                           ; Number of cases is 2, Range of values is 128 to 192
  1896                           ; switch strategies available:
  1897                           ; Name         Instructions Cycles
  1898                           ; simple_byte            7     4 (average)
  1899                           ;	Chosen strategy is simple_byte
  1900  000BDC  0A80               	xorlw	128	; case 128
  1901  000BDE  B4D8               	btfsc	status,2,c
  1902  000BE0  D7BD               	goto	l2271
  1903  000BE2  0A40               	xorlw	64	; case 192
  1904  000BE4  B4D8               	btfsc	status,2,c
  1905  000BE6  D777               	goto	l2269
  1906  000BE8                     l2279:
  1907                           
  1908                           ; BSR set to: 0
  1909  000BE8  0100               	movlb	0	; force () banked
  1910  000BEA  EE20 F002          	lfsr	2,2
  1911  000BEE  5178               	movf	__doprnt@pb& (0+255),w,b
  1912  000BF0  26D9               	addwf	fsr2l,f,c
  1913  000BF2  5179               	movf	(__doprnt@pb+1)& (0+255),w,b
  1914  000BF4  22DA               	addwfc	fsr2h,f,c
  1915  000BF6  50DE               	movf	postinc2,w,c
  1916  000BF8  10DE               	iorwf	postinc2,w,c
  1917  000BFA  B4D8               	btfsc	status,2,c
  1918  000BFC  D019               	goto	l2283
  1919                           
  1920                           ; BSR set to: 0
  1921  000BFE  0100               	movlb	0	; force () banked
  1922  000C00  EE20 F002          	lfsr	2,2
  1923  000C04  5178               	movf	__doprnt@pb& (0+255),w,b
  1924  000C06  26D9               	addwf	fsr2l,f,c
  1925  000C08  5179               	movf	(__doprnt@pb+1)& (0+255),w,b
  1926  000C0A  22DA               	addwfc	fsr2h,f,c
  1927  000C0C  CFDE F07E          	movff	postinc2,??__doprnt
  1928  000C10  CFDD F07F          	movff	postdec2,??__doprnt+1
  1929  000C14  D801               	call	u1218
  1930  000C16  D021               	goto	l2287
  1931  000C18                     u1218:
  1932  000C18  0005               	push	
  1933  000C1A  6EFA               	movwf	pclath,c
  1934  000C1C  0100               	movlb	0	; force () banked
  1935  000C1E  517E               	movf	??__doprnt& (0+255),w,b
  1936  000C20  6EFD               	movwf	tosl,c
  1937  000C22  517F               	movf	(??__doprnt+1)& (0+255),w,b
  1938  000C24  6EFE               	movwf	tosh,c
  1939  000C26  6AFF               	clrf	tosu,c
  1940  000C28  50FA               	movf	pclath,w,c
  1941  000C2A  0100               	movlb	0	; force () banked
  1942  000C2C  518C               	movf	__doprnt@c& (0+255),w,b
  1943  000C2E  0012               	return		;indir
  1944  000C30                     l2283:
  1945                           
  1946                           ; BSR set to: 0
  1947  000C30  C078  FFD9         	movff	__doprnt@pb,fsr2l
  1948  000C34  C079  FFDA         	movff	__doprnt@pb+1,fsr2h
  1949  000C38  CFDE F07E          	movff	postinc2,??__doprnt
  1950  000C3C  CFDD F07F          	movff	postdec2,??__doprnt+1
  1951  000C40  C07E  FFD9         	movff	??__doprnt,fsr2l
  1952  000C44  C07F  FFDA         	movff	??__doprnt+1,fsr2h
  1953  000C48  C08C  FFDF         	movff	__doprnt@c,indf2
  1954                           
  1955                           ; BSR set to: 0
  1956  000C4C  C078  FFD9         	movff	__doprnt@pb,fsr2l
  1957  000C50  C079  FFDA         	movff	__doprnt@pb+1,fsr2h
  1958  000C54  2ADE               	incf	postinc2,f,c
  1959  000C56  0E00               	movlw	0
  1960  000C58  22DD               	addwfc	postdec2,f,c
  1961  000C5A                     l2287:
  1962  000C5A  0100               	movlb	0	; force () banked
  1963  000C5C  078A               	decf	__doprnt@prec& (0+255),f,b
  1964  000C5E  A0D8               	btfss	status,0,c
  1965  000C60  078B               	decf	(__doprnt@prec+1)& (0+255),f,b
  1966  000C62  298A               	incf	__doprnt@prec& (0+255),w,b
  1967  000C64  E1B8               	bnz	l2277
  1968  000C66  298B               	incf	(__doprnt@prec+1)& (0+255),w,b
  1969  000C68  A4D8               	btfss	status,2,c
  1970  000C6A  D7B5               	goto	l2277
  1971  000C6C                     u1220:
  1972  000C6C  C07A  FFF6         	movff	__doprnt@f,tblptrl
  1973  000C70  C07B  FFF7         	movff	__doprnt@f+1,tblptrh
  1974  000C74  0100               	movlb	0	; force () banked
  1975  000C76  4B7A               	infsnz	__doprnt@f& (0+255),f,b
  1976  000C78  2B7B               	incf	(__doprnt@f+1)& (0+255),f,b
  1977  000C7A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1978  000C7A  6AF8               	clrf	tblptru,c
  1979  000C7C                     	endif
  1980  000C7C                     	if	0	;tblptru may be non-zero
  1981  000C7C                     	endif
  1982  000C7C  0008               	tblrd		*
  1983  000C7E  CFF5 F08C          	movff	tablat,__doprnt@c
  1984  000C82  0100               	movlb	0	; force () banked
  1985  000C84  518C               	movf	__doprnt@c& (0+255),w,b
  1986  000C86  A4D8               	btfss	status,2,c
  1987  000C88  D500               	goto	l2153
  1988  000C8A                     u1230:
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;doprnt.c: 1559: return 0;
  1992  000C8A  0E00               	movlw	0
  1993  000C8C  0100               	movlb	0	; force () banked
  1994  000C8E  6F79               	movwf	(?__doprnt+1)& (0+255),b
  1995  000C90  0E00               	movlw	0
  1996  000C92  6F78               	movwf	?__doprnt& (0+255),b
  1997                           
  1998                           ; BSR set to: 0
  1999  000C94  0012               	return		;funcret
  2000  000C96                     __end_of__doprnt:
  2001                           	opt callstack 0
  2002                           
  2003 ;; *************** function _putch *****************
  2004 ;; Defined at:
  2005 ;;		line 160 in file "mcc_generated_files/eusart.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  txData          1    wreg     unsigned char 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  txData          1    3[BANK0 ] unsigned char 
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      void 
  2012 ;; Registers used:
  2013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2019 ;;      Params:         0       0       0       0       0       0       0
  2020 ;;      Locals:         0       1       0       0       0       0       0
  2021 ;;      Temps:          0       0       0       0       0       0       0
  2022 ;;      Totals:         0       1       0       0       0       0       0
  2023 ;;Total ram usage:        1 bytes
  2024 ;; Hardware stack levels used:    1
  2025 ;; Hardware stack levels required when called:    3
  2026 ;; This function calls:
  2027 ;;		_EUSART_Write
  2028 ;; This function is called by:
  2029 ;;		_printf
  2030 ;;		__doprnt
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           	psect	text6
  2035  0013AC                     __ptext6:
  2036                           	opt callstack 0
  2037  0013AC                     _putch:
  2038                           	opt callstack 25
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;incstack = 0
  2042                           ;putch@txData stored from wreg
  2043  0013AC  0100               	movlb	0	; force () banked
  2044  0013AE  6F63               	movwf	putch@txData& (0+255),b
  2045                           
  2046                           ;eusart.c: 162: EUSART_Write(txData);
  2047  0013B0  0100               	movlb	0	; force () banked
  2048  0013B2  5163               	movf	putch@txData& (0+255),w,b
  2049  0013B4  EC5C  F008         	call	_EUSART_Write
  2050  0013B8  0012               	return		;funcret
  2051  0013BA                     __end_of_putch:
  2052                           	opt callstack 0
  2053                           
  2054 ;; *************** function _EUSART_Write *****************
  2055 ;; Defined at:
  2056 ;;		line 132 in file "mcc_generated_files/eusart.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;  txData          1    wreg     unsigned char 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  txData          1    2[BANK0 ] unsigned char 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2070 ;;      Params:         0       0       0       0       0       0       0
  2071 ;;      Locals:         0       1       0       0       0       0       0
  2072 ;;      Temps:          0       0       0       0       0       0       0
  2073 ;;      Totals:         0       1       0       0       0       0       0
  2074 ;;Total ram usage:        1 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    2
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_putch
  2081 ;;		_eco
  2082 ;; This function uses a non-reentrant model
  2083 ;;
  2084                           
  2085                           	psect	text7
  2086  0010B8                     __ptext7:
  2087                           	opt callstack 0
  2088  0010B8                     _EUSART_Write:
  2089                           	opt callstack 25
  2090                           
  2091                           ;incstack = 0
  2092                           ;EUSART_Write@txData stored from wreg
  2093  0010B8  0100               	movlb	0	; force () banked
  2094  0010BA  6F62               	movwf	EUSART_Write@txData& (0+255),b
  2095  0010BC                     
  2096                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  2097  0010BC  0100               	movlb	0	; force () banked
  2098  0010BE  51C9               	movf	_eusartTxBufferRemaining& (0+255),w,b	;volatile
  2099  0010C0  B4D8               	btfsc	status,2,c
  2100  0010C2  D7FC               	goto	l1339
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;eusart.c: 136: };eusart.c: 138: if(0 == PIE1bits.TX1IE)
  2104  0010C4  B89D               	btfsc	3997,4,c	;volatile
  2105  0010C6  D003               	goto	l310
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;eusart.c: 139: {;eusart.c: 140: TXREG = txData;
  2109  0010C8  C062  FFAD         	movff	EUSART_Write@txData,4013	;volatile
  2110                           
  2111                           ;eusart.c: 141: }
  2112  0010CC  D015               	goto	l1355
  2113  0010CE                     l310:
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;eusart.c: 142: else;eusart.c: 143: {;eusart.c: 144: PIE1bits.TX1IE = 0;
  2117  0010CE  989D               	bcf	3997,4,c	;volatile
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  2121  0010D0  0E9A               	movlw	low _eusartTxBuffer
  2122  0010D2  0100               	movlb	0	; force () banked
  2123  0010D4  25B6               	addwf	_eusartTxHead& (0+255),w,b	;volatile
  2124  0010D6  6ED9               	movwf	fsr2l,c
  2125  0010D8  6ADA               	clrf	fsr2h,c
  2126  0010DA  0E00               	movlw	high _eusartTxBuffer
  2127  0010DC  22DA               	addwfc	fsr2h,f,c
  2128  0010DE  C062  FFDF         	movff	EUSART_Write@txData,indf2
  2129                           
  2130                           ; BSR set to: 0
  2131  0010E2  0100               	movlb	0	; force () banked
  2132  0010E4  2BB6               	incf	_eusartTxHead& (0+255),f,b	;volatile
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  2136  0010E6  0E0F               	movlw	15
  2137  0010E8  0100               	movlb	0	; force () banked
  2138  0010EA  65B6               	cpfsgt	_eusartTxHead& (0+255),b	;volatile
  2139  0010EC  D003               	goto	l1353
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;eusart.c: 147: {;eusart.c: 148: eusartTxHead = 0;
  2143  0010EE  0E00               	movlw	0
  2144  0010F0  0100               	movlb	0	; force () banked
  2145  0010F2  6FB6               	movwf	_eusartTxHead& (0+255),b	;volatile
  2146  0010F4                     l1353:
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;eusart.c: 149: };eusart.c: 150: eusartTxBufferRemaining--;
  2150  0010F4  0100               	movlb	0	; force () banked
  2151  0010F6  07C9               	decf	_eusartTxBufferRemaining& (0+255),f,b	;volatile
  2152  0010F8                     l1355:
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;eusart.c: 151: };eusart.c: 152: PIE1bits.TX1IE = 1;
  2156  0010F8  889D               	bsf	3997,4,c	;volatile
  2157                           
  2158                           ; BSR set to: 0
  2159  0010FA  0012               	return		;funcret
  2160  0010FC                     __end_of_EUSART_Write:
  2161                           	opt callstack 0
  2162                           
  2163 ;; *************** function _isdigit *****************
  2164 ;; Defined at:
  2165 ;;		line 8 in file "D:\Programas_varios\Microchip\xc8\v2.05\pic\sources\c90\common\isdigit.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;  c               1    wreg     unsigned char 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  c               1    4[BANK0 ] unsigned char 
  2170 ;; Return value:  Size  Location     Type
  2171 ;;		None               void
  2172 ;; Registers used:
  2173 ;;		wreg, status,2, status,0
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2179 ;;      Params:         0       0       0       0       0       0       0
  2180 ;;      Locals:         0       2       0       0       0       0       0
  2181 ;;      Temps:          0       1       0       0       0       0       0
  2182 ;;      Totals:         0       3       0       0       0       0       0
  2183 ;;Total ram usage:        3 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; Hardware stack levels required when called:    2
  2186 ;; This function calls:
  2187 ;;		Nothing
  2188 ;; This function is called by:
  2189 ;;		__doprnt
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           
  2193                           	psect	text8
  2194  0012EA                     __ptext8:
  2195                           	opt callstack 0
  2196  0012EA                     _isdigit:
  2197                           	opt callstack 26
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;incstack = 0
  2201                           ;isdigit@c stored from wreg
  2202  0012EA  0100               	movlb	0	; () banked
  2203  0012EC  6F64               	movwf	isdigit@c& (0+255),b
  2204  0012EE  0E00               	movlw	0
  2205  0012F0  0100               	movlb	0	; () banked
  2206  0012F2  6F63               	movwf	_isdigit$1860& (0+255),b
  2207                           
  2208                           ; BSR set to: 0
  2209  0012F4  0E3A               	movlw	58
  2210  0012F6  6164               	cpfslt	isdigit@c& (0+255),b
  2211  0012F8  D005               	goto	l2093
  2212                           
  2213                           ; BSR set to: 0
  2214  0012FA  0E2F               	movlw	47
  2215  0012FC  6564               	cpfsgt	isdigit@c& (0+255),b
  2216  0012FE  D002               	goto	l2093
  2217                           
  2218                           ; BSR set to: 0
  2219  001300  0E01               	movlw	1
  2220  001302  6F63               	movwf	_isdigit$1860& (0+255),b
  2221  001304                     l2093:
  2222                           
  2223                           ; BSR set to: 0
  2224  001304  C063  F062         	movff	_isdigit$1860,??_isdigit
  2225  001308  3162               	rrcf	??_isdigit& (0+255),w,b
  2226                           
  2227                           ; BSR set to: 0
  2228  00130A  0012               	return		;funcret
  2229  00130C                     __end_of_isdigit:
  2230                           	opt callstack 0
  2231                           
  2232 ;; *************** function ___wmul *****************
  2233 ;; Defined at:
  2234 ;;		line 15 in file "D:\Programas_varios\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;  multiplier      2    2[BANK0 ] unsigned int 
  2237 ;;  multiplicand    2    4[BANK0 ] unsigned int 
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;  product         2    6[BANK0 ] unsigned int 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  2    2[BANK0 ] unsigned int 
  2242 ;; Registers used:
  2243 ;;		wreg, status,2, status,0, prodl, prodh
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2249 ;;      Params:         0       4       0       0       0       0       0
  2250 ;;      Locals:         0       2       0       0       0       0       0
  2251 ;;      Temps:          0       0       0       0       0       0       0
  2252 ;;      Totals:         0       6       0       0       0       0       0
  2253 ;;Total ram usage:        6 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    2
  2256 ;; This function calls:
  2257 ;;		Nothing
  2258 ;; This function is called by:
  2259 ;;		__doprnt
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text9
  2264  00129C                     __ptext9:
  2265                           	opt callstack 0
  2266  00129C                     ___wmul:
  2267                           	opt callstack 26
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;incstack = 0
  2271  00129C  0100               	movlb	0	; () banked
  2272  00129E  5162               	movf	___wmul@multiplier& (0+255),w,b
  2273  0012A0  0364               	mulwf	___wmul@multiplicand& (0+255),b
  2274  0012A2  CFF3 F066          	movff	prodl,___wmul@product
  2275  0012A6  CFF4 F067          	movff	prodh,___wmul@product+1
  2276  0012AA  5162               	movf	___wmul@multiplier& (0+255),w,b
  2277  0012AC  0365               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2278  0012AE  50F3               	movf	prodl,w,c
  2279  0012B0  2767               	addwf	(___wmul@product+1)& (0+255),f,b
  2280  0012B2  5163               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2281  0012B4  0364               	mulwf	___wmul@multiplicand& (0+255),b
  2282  0012B6  50F3               	movf	prodl,w,c
  2283  0012B8  2767               	addwf	(___wmul@product+1)& (0+255),f,b
  2284                           
  2285                           ; BSR set to: 0
  2286  0012BA  C066  F062         	movff	___wmul@product,?___wmul
  2287  0012BE  C067  F063         	movff	___wmul@product+1,?___wmul+1
  2288                           
  2289                           ; BSR set to: 0
  2290  0012C2  0012               	return		;funcret
  2291  0012C4                     __end_of___wmul:
  2292                           	opt callstack 0
  2293                           
  2294 ;; *************** function ___llmod *****************
  2295 ;; Defined at:
  2296 ;;		line 7 in file "D:\Programas_varios\Microchip\xc8\v2.05\pic\sources\c90\common\llmod.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;  dividend        4   15[BANK0 ] unsigned long 
  2299 ;;  divisor         4   19[BANK0 ] unsigned long 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  counter         1   23[BANK0 ] unsigned char 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  4   15[BANK0 ] unsigned long 
  2304 ;; Registers used:
  2305 ;;		wreg, status,2, status,0
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2311 ;;      Params:         0       8       0       0       0       0       0
  2312 ;;      Locals:         0       1       0       0       0       0       0
  2313 ;;      Temps:          0       0       0       0       0       0       0
  2314 ;;      Totals:         0       9       0       0       0       0       0
  2315 ;;Total ram usage:        9 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    2
  2318 ;; This function calls:
  2319 ;;		Nothing
  2320 ;; This function is called by:
  2321 ;;		__doprnt
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text10
  2326  000E9C                     __ptext10:
  2327                           	opt callstack 0
  2328  000E9C                     ___llmod:
  2329                           	opt callstack 26
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;incstack = 0
  2333  000E9C  0100               	movlb	0	; () banked
  2334  000E9E  5173               	movf	___llmod@divisor& (0+255),w,b
  2335  000EA0  1174               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  2336  000EA2  1175               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  2337  000EA4  1176               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  2338  000EA6  B4D8               	btfsc	status,2,c
  2339  000EA8  D024               	goto	l975
  2340                           
  2341                           ; BSR set to: 0
  2342  000EAA  0E01               	movlw	1
  2343  000EAC  6F77               	movwf	___llmod@counter& (0+255),b
  2344  000EAE  D006               	goto	l2131
  2345  000EB0                     l2129:
  2346                           
  2347                           ; BSR set to: 0
  2348  000EB0  90D8               	bcf	status,0,c
  2349  000EB2  3773               	rlcf	___llmod@divisor& (0+255),f,b
  2350  000EB4  3774               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  2351  000EB6  3775               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  2352  000EB8  3776               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  2353  000EBA  2B77               	incf	___llmod@counter& (0+255),f,b
  2354  000EBC                     l2131:
  2355                           
  2356                           ; BSR set to: 0
  2357  000EBC  AF76               	btfss	(___llmod@divisor+3)& (0+255),7,b
  2358  000EBE  D7F8               	goto	l2129
  2359  000EC0                     u910:
  2360                           
  2361                           ; BSR set to: 0
  2362  000EC0  5173               	movf	___llmod@divisor& (0+255),w,b
  2363  000EC2  5D6F               	subwf	___llmod@dividend& (0+255),w,b
  2364  000EC4  5174               	movf	(___llmod@divisor+1)& (0+255),w,b
  2365  000EC6  5970               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  2366  000EC8  5175               	movf	(___llmod@divisor+2)& (0+255),w,b
  2367  000ECA  5971               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  2368  000ECC  5176               	movf	(___llmod@divisor+3)& (0+255),w,b
  2369  000ECE  5972               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  2370  000ED0  A0D8               	btfss	status,0,c
  2371  000ED2  D008               	goto	l2137
  2372                           
  2373                           ; BSR set to: 0
  2374  000ED4  5173               	movf	___llmod@divisor& (0+255),w,b
  2375  000ED6  5F6F               	subwf	___llmod@dividend& (0+255),f,b
  2376  000ED8  5174               	movf	(___llmod@divisor+1)& (0+255),w,b
  2377  000EDA  5B70               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  2378  000EDC  5175               	movf	(___llmod@divisor+2)& (0+255),w,b
  2379  000EDE  5B71               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  2380  000EE0  5176               	movf	(___llmod@divisor+3)& (0+255),w,b
  2381  000EE2  5B72               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  2382  000EE4                     l2137:
  2383                           
  2384                           ; BSR set to: 0
  2385  000EE4  90D8               	bcf	status,0,c
  2386  000EE6  3376               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  2387  000EE8  3375               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  2388  000EEA  3374               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  2389  000EEC  3373               	rrcf	___llmod@divisor& (0+255),f,b
  2390                           
  2391                           ; BSR set to: 0
  2392  000EEE  2F77               	decfsz	___llmod@counter& (0+255),f,b
  2393  000EF0  D7E7               	goto	u910
  2394  000EF2                     l975:
  2395                           
  2396                           ; BSR set to: 0
  2397  000EF2  C06F  F06F         	movff	___llmod@dividend,?___llmod
  2398  000EF6  C070  F070         	movff	___llmod@dividend+1,?___llmod+1
  2399  000EFA  C071  F071         	movff	___llmod@dividend+2,?___llmod+2
  2400  000EFE  C072  F072         	movff	___llmod@dividend+3,?___llmod+3
  2401                           
  2402                           ; BSR set to: 0
  2403  000F02  0012               	return		;funcret
  2404  000F04                     __end_of___llmod:
  2405                           	opt callstack 0
  2406                           
  2407 ;; *************** function ___lldiv *****************
  2408 ;; Defined at:
  2409 ;;		line 7 in file "D:\Programas_varios\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;  dividend        4    2[BANK0 ] unsigned long 
  2412 ;;  divisor         4    6[BANK0 ] unsigned long 
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;  quotient        4   10[BANK0 ] unsigned long 
  2415 ;;  counter         1   14[BANK0 ] unsigned char 
  2416 ;; Return value:  Size  Location     Type
  2417 ;;                  4    2[BANK0 ] unsigned long 
  2418 ;; Registers used:
  2419 ;;		wreg, status,2, status,0
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2425 ;;      Params:         0       8       0       0       0       0       0
  2426 ;;      Locals:         0       5       0       0       0       0       0
  2427 ;;      Temps:          0       0       0       0       0       0       0
  2428 ;;      Totals:         0      13       0       0       0       0       0
  2429 ;;Total ram usage:       13 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; Hardware stack levels required when called:    2
  2432 ;; This function calls:
  2433 ;;		Nothing
  2434 ;; This function is called by:
  2435 ;;		__doprnt
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text11
  2440  000E18                     __ptext11:
  2441                           	opt callstack 0
  2442  000E18                     ___lldiv:
  2443                           	opt callstack 26
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;incstack = 0
  2447  000E18  0E00               	movlw	0
  2448  000E1A  0100               	movlb	0	; () banked
  2449  000E1C  6F6A               	movwf	___lldiv@quotient& (0+255),b
  2450  000E1E  0E00               	movlw	0
  2451  000E20  6F6B               	movwf	(___lldiv@quotient+1)& (0+255),b
  2452  000E22  0E00               	movlw	0
  2453  000E24  6F6C               	movwf	(___lldiv@quotient+2)& (0+255),b
  2454  000E26  0E00               	movlw	0
  2455  000E28  6F6D               	movwf	(___lldiv@quotient+3)& (0+255),b
  2456                           
  2457                           ; BSR set to: 0
  2458  000E2A  5166               	movf	___lldiv@divisor& (0+255),w,b
  2459  000E2C  1167               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  2460  000E2E  1168               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  2461  000E30  1169               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  2462  000E32  B4D8               	btfsc	status,2,c
  2463  000E34  D02A               	goto	l594
  2464                           
  2465                           ; BSR set to: 0
  2466  000E36  0E01               	movlw	1
  2467  000E38  6F6E               	movwf	___lldiv@counter& (0+255),b
  2468  000E3A  D006               	goto	l2111
  2469  000E3C                     l2109:
  2470                           
  2471                           ; BSR set to: 0
  2472  000E3C  90D8               	bcf	status,0,c
  2473  000E3E  3766               	rlcf	___lldiv@divisor& (0+255),f,b
  2474  000E40  3767               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  2475  000E42  3768               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  2476  000E44  3769               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  2477  000E46  2B6E               	incf	___lldiv@counter& (0+255),f,b
  2478  000E48                     l2111:
  2479                           
  2480                           ; BSR set to: 0
  2481  000E48  AF69               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  2482  000E4A  D7F8               	goto	l2109
  2483  000E4C                     u880:
  2484                           
  2485                           ; BSR set to: 0
  2486  000E4C  90D8               	bcf	status,0,c
  2487  000E4E  376A               	rlcf	___lldiv@quotient& (0+255),f,b
  2488  000E50  376B               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  2489  000E52  376C               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  2490  000E54  376D               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  2491                           
  2492                           ; BSR set to: 0
  2493  000E56  5166               	movf	___lldiv@divisor& (0+255),w,b
  2494  000E58  5D62               	subwf	___lldiv@dividend& (0+255),w,b
  2495  000E5A  5167               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2496  000E5C  5963               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  2497  000E5E  5168               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2498  000E60  5964               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  2499  000E62  5169               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2500  000E64  5965               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  2501  000E66  A0D8               	btfss	status,0,c
  2502  000E68  D009               	goto	l2121
  2503                           
  2504                           ; BSR set to: 0
  2505  000E6A  5166               	movf	___lldiv@divisor& (0+255),w,b
  2506  000E6C  5F62               	subwf	___lldiv@dividend& (0+255),f,b
  2507  000E6E  5167               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2508  000E70  5B63               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  2509  000E72  5168               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2510  000E74  5B64               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  2511  000E76  5169               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2512  000E78  5B65               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  2513                           
  2514                           ; BSR set to: 0
  2515  000E7A  816A               	bsf	___lldiv@quotient& (0+255),0,b
  2516  000E7C                     l2121:
  2517                           
  2518                           ; BSR set to: 0
  2519  000E7C  90D8               	bcf	status,0,c
  2520  000E7E  3369               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  2521  000E80  3368               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  2522  000E82  3367               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  2523  000E84  3366               	rrcf	___lldiv@divisor& (0+255),f,b
  2524                           
  2525                           ; BSR set to: 0
  2526  000E86  2F6E               	decfsz	___lldiv@counter& (0+255),f,b
  2527  000E88  D7E1               	goto	u880
  2528  000E8A                     l594:
  2529                           
  2530                           ; BSR set to: 0
  2531  000E8A  C06A  F062         	movff	___lldiv@quotient,?___lldiv
  2532  000E8E  C06B  F063         	movff	___lldiv@quotient+1,?___lldiv+1
  2533  000E92  C06C  F064         	movff	___lldiv@quotient+2,?___lldiv+2
  2534  000E96  C06D  F065         	movff	___lldiv@quotient+3,?___lldiv+3
  2535                           
  2536                           ; BSR set to: 0
  2537  000E9A  0012               	return		;funcret
  2538  000E9C                     __end_of___lldiv:
  2539                           	opt callstack 0
  2540                           
  2541 ;; *************** function _SYSTEM_Initialize *****************
  2542 ;; Defined at:
  2543 ;;		line 107 in file "mcc_generated_files/mcc.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;		None
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;		None
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, status,2, cstack
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2557 ;;      Params:         0       0       0       0       0       0       0
  2558 ;;      Locals:         0       0       0       0       0       0       0
  2559 ;;      Temps:          0       0       0       0       0       0       0
  2560 ;;      Totals:         0       0       0       0       0       0       0
  2561 ;;Total ram usage:        0 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; Hardware stack levels required when called:    4
  2564 ;; This function calls:
  2565 ;;		_ADC_Initialize
  2566 ;;		_EUSART_Initialize
  2567 ;;		_INTERRUPT_Initialize
  2568 ;;		_OSCILLATOR_Initialize
  2569 ;;		_PIN_MANAGER_Initialize
  2570 ;;		_TMR0_Initialize
  2571 ;; This function is called by:
  2572 ;;		_main
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           	psect	text12
  2577  00130C                     __ptext12:
  2578                           	opt callstack 0
  2579  00130C                     _SYSTEM_Initialize:
  2580                           	opt callstack 26
  2581                           
  2582                           ;mcc.c: 110: INTERRUPT_Initialize();
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;incstack = 0
  2586  00130C  ECEA  F009         	call	_INTERRUPT_Initialize	;wreg free
  2587                           
  2588                           ;mcc.c: 111: PIN_MANAGER_Initialize();
  2589  001310  EC62  F009         	call	_PIN_MANAGER_Initialize	;wreg free
  2590                           
  2591                           ;mcc.c: 112: OSCILLATOR_Initialize();
  2592  001314  ECE3  F009         	call	_OSCILLATOR_Initialize	;wreg free
  2593                           
  2594                           ;mcc.c: 113: ADC_Initialize();
  2595  001318  ECB7  F009         	call	_ADC_Initialize	;wreg free
  2596                           
  2597                           ;mcc.c: 114: TMR0_Initialize();
  2598  00131C  EC93  F009         	call	_TMR0_Initialize	;wreg free
  2599                           
  2600                           ;mcc.c: 115: EUSART_Initialize();
  2601  001320  ECBF  F008         	call	_EUSART_Initialize	;wreg free
  2602  001324  0012               	return		;funcret
  2603  001326                     __end_of_SYSTEM_Initialize:
  2604                           	opt callstack 0
  2605                           
  2606 ;; *************** function _TMR0_Initialize *****************
  2607 ;; Defined at:
  2608 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, status,2, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2622 ;;      Params:         0       0       0       0       0       0       0
  2623 ;;      Locals:         0       0       0       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0
  2625 ;;      Totals:         0       0       0       0       0       0       0
  2626 ;;Total ram usage:        0 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    3
  2629 ;; This function calls:
  2630 ;;		_TMR0_StartTimer
  2631 ;; This function is called by:
  2632 ;;		_SYSTEM_Initialize
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text13
  2637  001326                     __ptext13:
  2638                           	opt callstack 0
  2639  001326                     _TMR0_Initialize:
  2640                           	opt callstack 26
  2641                           
  2642                           ;tmr0.c: 70: T0CON = 0x7F;
  2643                           
  2644                           ;incstack = 0
  2645  001326  0E7F               	movlw	127
  2646  001328  6ED5               	movwf	4053,c	;volatile
  2647                           
  2648                           ;tmr0.c: 73: TMR0H = 0x00;
  2649  00132A  0E00               	movlw	0
  2650  00132C  6ED7               	movwf	4055,c	;volatile
  2651                           
  2652                           ;tmr0.c: 76: TMR0L = 0x9C;
  2653  00132E  0E9C               	movlw	156
  2654  001330  6ED6               	movwf	4054,c	;volatile
  2655                           
  2656                           ;tmr0.c: 79: timer0ReloadVal = 156;
  2657  001332  0E9C               	movlw	156
  2658  001334  0100               	movlb	0	; force () banked
  2659  001336  6FC8               	movwf	_timer0ReloadVal& (0+255),b	;volatile
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
  2663  001338  94F2               	bcf	4082,2,c	;volatile
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;tmr0.c: 86: TMR0_StartTimer();
  2667  00133A  ECE8  F009         	call	_TMR0_StartTimer	;wreg free
  2668  00133E  0012               	return		;funcret
  2669  001340                     __end_of_TMR0_Initialize:
  2670                           	opt callstack 0
  2671                           
  2672 ;; *************** function _TMR0_StartTimer *****************
  2673 ;; Defined at:
  2674 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;		None
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		None
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2688 ;;      Params:         0       0       0       0       0       0       0
  2689 ;;      Locals:         0       0       0       0       0       0       0
  2690 ;;      Temps:          0       0       0       0       0       0       0
  2691 ;;      Totals:         0       0       0       0       0       0       0
  2692 ;;Total ram usage:        0 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    2
  2695 ;; This function calls:
  2696 ;;		Nothing
  2697 ;; This function is called by:
  2698 ;;		_TMR0_Initialize
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           	psect	text14
  2703  0013D0                     __ptext14:
  2704                           	opt callstack 0
  2705  0013D0                     _TMR0_StartTimer:
  2706                           	opt callstack 26
  2707                           
  2708                           ;tmr0.c: 92: T0CONbits.TMR0ON = 1;
  2709                           
  2710                           ;incstack = 0
  2711  0013D0  8ED5               	bsf	4053,7,c	;volatile
  2712  0013D2  0012               	return		;funcret
  2713  0013D4                     __end_of_TMR0_StartTimer:
  2714                           	opt callstack 0
  2715                           
  2716 ;; *************** function _PIN_MANAGER_Initialize *****************
  2717 ;; Defined at:
  2718 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;		None
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;		None
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  1    wreg      void 
  2725 ;; Registers used:
  2726 ;;		wreg, status,2
  2727 ;; Tracked objects:
  2728 ;;		On entry : 0/0
  2729 ;;		On exit  : 0/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2732 ;;      Params:         0       0       0       0       0       0       0
  2733 ;;      Locals:         0       0       0       0       0       0       0
  2734 ;;      Temps:          0       0       0       0       0       0       0
  2735 ;;      Totals:         0       0       0       0       0       0       0
  2736 ;;Total ram usage:        0 bytes
  2737 ;; Hardware stack levels used:    1
  2738 ;; Hardware stack levels required when called:    2
  2739 ;; This function calls:
  2740 ;;		Nothing
  2741 ;; This function is called by:
  2742 ;;		_SYSTEM_Initialize
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text15
  2747  0012C4                     __ptext15:
  2748                           	opt callstack 0
  2749  0012C4                     _PIN_MANAGER_Initialize:
  2750                           	opt callstack 27
  2751                           
  2752                           ;pin_manager.c: 57: LATA = 0x00;
  2753                           
  2754                           ;incstack = 0
  2755  0012C4  0E00               	movlw	0
  2756  0012C6  6E89               	movwf	3977,c	;volatile
  2757                           
  2758                           ;pin_manager.c: 58: LATB = 0x00;
  2759  0012C8  0E00               	movlw	0
  2760  0012CA  6E8A               	movwf	3978,c	;volatile
  2761                           
  2762                           ;pin_manager.c: 59: LATC = 0x00;
  2763  0012CC  0E00               	movlw	0
  2764  0012CE  6E8B               	movwf	3979,c	;volatile
  2765                           
  2766                           ;pin_manager.c: 64: TRISA = 0xFE;
  2767  0012D0  0EFE               	movlw	254
  2768  0012D2  6E92               	movwf	3986,c	;volatile
  2769                           
  2770                           ;pin_manager.c: 65: TRISB = 0xFF;
  2771  0012D4  6893               	setf	3987,c	;volatile
  2772                           
  2773                           ;pin_manager.c: 66: TRISC = 0xBF;
  2774  0012D6  0EBF               	movlw	191
  2775  0012D8  6E94               	movwf	3988,c	;volatile
  2776                           
  2777                           ;pin_manager.c: 71: ANSELH = 0x00;
  2778  0012DA  0E00               	movlw	0
  2779  0012DC  6E7F               	movwf	3967,c	;volatile
  2780                           
  2781                           ;pin_manager.c: 72: ANSEL = 0x1E;
  2782  0012DE  0E1E               	movlw	30
  2783  0012E0  6E7E               	movwf	3966,c	;volatile
  2784                           
  2785                           ;pin_manager.c: 77: WPUB = 0x80;
  2786  0012E2  0E80               	movlw	128
  2787  0012E4  6E7C               	movwf	3964,c	;volatile
  2788                           
  2789                           ;pin_manager.c: 78: INTCON2bits.nRBPU = 0;
  2790  0012E6  9EF1               	bcf	4081,7,c	;volatile
  2791  0012E8  0012               	return		;funcret
  2792  0012EA                     __end_of_PIN_MANAGER_Initialize:
  2793                           	opt callstack 0
  2794                           
  2795 ;; *************** function _OSCILLATOR_Initialize *****************
  2796 ;; Defined at:
  2797 ;;		line 118 in file "mcc_generated_files/mcc.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;		None
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;		None
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		wreg, status,2
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2811 ;;      Params:         0       0       0       0       0       0       0
  2812 ;;      Locals:         0       0       0       0       0       0       0
  2813 ;;      Temps:          0       0       0       0       0       0       0
  2814 ;;      Totals:         0       0       0       0       0       0       0
  2815 ;;Total ram usage:        0 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    2
  2818 ;; This function calls:
  2819 ;;		Nothing
  2820 ;; This function is called by:
  2821 ;;		_SYSTEM_Initialize
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text16
  2826  0013C6                     __ptext16:
  2827                           	opt callstack 0
  2828  0013C6                     _OSCILLATOR_Initialize:
  2829                           	opt callstack 27
  2830                           
  2831                           ;mcc.c: 121: OSCCON = 0x30;
  2832                           
  2833                           ;incstack = 0
  2834  0013C6  0E30               	movlw	48
  2835  0013C8  6ED3               	movwf	4051,c	;volatile
  2836                           
  2837                           ;mcc.c: 123: OSCTUNE = 0x00;
  2838  0013CA  0E00               	movlw	0
  2839  0013CC  6E9B               	movwf	3995,c	;volatile
  2840  0013CE  0012               	return		;funcret
  2841  0013D0                     __end_of_OSCILLATOR_Initialize:
  2842                           	opt callstack 0
  2843                           
  2844 ;; *************** function _INTERRUPT_Initialize *****************
  2845 ;; Defined at:
  2846 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;		None
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;		None
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		None
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2860 ;;      Params:         0       0       0       0       0       0       0
  2861 ;;      Locals:         0       0       0       0       0       0       0
  2862 ;;      Temps:          0       0       0       0       0       0       0
  2863 ;;      Totals:         0       0       0       0       0       0       0
  2864 ;;Total ram usage:        0 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    2
  2867 ;; This function calls:
  2868 ;;		Nothing
  2869 ;; This function is called by:
  2870 ;;		_SYSTEM_Initialize
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           	psect	text17
  2875  0013D4                     __ptext17:
  2876                           	opt callstack 0
  2877  0013D4                     _INTERRUPT_Initialize:
  2878                           	opt callstack 27
  2879                           
  2880                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  2881                           
  2882                           ;incstack = 0
  2883  0013D4  9ED0               	bcf	4048,7,c	;volatile
  2884  0013D6  0012               	return		;funcret
  2885  0013D8                     __end_of_INTERRUPT_Initialize:
  2886                           	opt callstack 0
  2887                           
  2888 ;; *************** function _EUSART_Initialize *****************
  2889 ;; Defined at:
  2890 ;;		line 75 in file "mcc_generated_files/eusart.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;		None
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;		None
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  1    wreg      void 
  2897 ;; Registers used:
  2898 ;;		wreg, status,2
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2904 ;;      Params:         0       0       0       0       0       0       0
  2905 ;;      Locals:         0       0       0       0       0       0       0
  2906 ;;      Temps:          0       0       0       0       0       0       0
  2907 ;;      Totals:         0       0       0       0       0       0       0
  2908 ;;Total ram usage:        0 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    2
  2911 ;; This function calls:
  2912 ;;		Nothing
  2913 ;; This function is called by:
  2914 ;;		_SYSTEM_Initialize
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text18
  2919  00117E                     __ptext18:
  2920                           	opt callstack 0
  2921  00117E                     _EUSART_Initialize:
  2922                           	opt callstack 27
  2923                           
  2924                           ;eusart.c: 78: PIE1bits.RC1IE = 0;
  2925                           
  2926                           ;incstack = 0
  2927  00117E  9A9D               	bcf	3997,5,c	;volatile
  2928                           
  2929                           ;eusart.c: 79: PIE1bits.TX1IE = 0;
  2930  001180  989D               	bcf	3997,4,c	;volatile
  2931                           
  2932                           ;eusart.c: 84: BAUDCON = 0x08;
  2933  001182  0E08               	movlw	8
  2934  001184  6EB8               	movwf	4024,c	;volatile
  2935                           
  2936                           ;eusart.c: 87: RCSTA = 0x90;
  2937  001186  0E90               	movlw	144
  2938  001188  6EAB               	movwf	4011,c	;volatile
  2939                           
  2940                           ;eusart.c: 90: TXSTA = 0x24;
  2941  00118A  0E24               	movlw	36
  2942  00118C  6EAC               	movwf	4012,c	;volatile
  2943                           
  2944                           ;eusart.c: 93: SPBRG = 0x33;
  2945  00118E  0E33               	movlw	51
  2946  001190  6EAF               	movwf	4015,c	;volatile
  2947                           
  2948                           ;eusart.c: 96: SPBRGH = 0x00;
  2949  001192  0E00               	movlw	0
  2950  001194  6EB0               	movwf	4016,c	;volatile
  2951                           
  2952                           ;eusart.c: 100: eusartTxHead = 0;
  2953  001196  0E00               	movlw	0
  2954  001198  0100               	movlb	0	; force () banked
  2955  00119A  6FB6               	movwf	_eusartTxHead& (0+255),b	;volatile
  2956                           
  2957                           ;eusart.c: 101: eusartTxTail = 0;
  2958  00119C  0E00               	movlw	0
  2959  00119E  0100               	movlb	0	; force () banked
  2960  0011A0  6FB5               	movwf	_eusartTxTail& (0+255),b	;volatile
  2961                           
  2962                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  2963  0011A2  0E10               	movlw	16
  2964  0011A4  0100               	movlb	0	; force () banked
  2965  0011A6  6FC9               	movwf	_eusartTxBufferRemaining& (0+255),b	;volatile
  2966                           
  2967                           ;eusart.c: 104: eusartRxHead = 0;
  2968  0011A8  0E00               	movlw	0
  2969  0011AA  0100               	movlb	0	; force () banked
  2970  0011AC  6FB4               	movwf	_eusartRxHead& (0+255),b	;volatile
  2971                           
  2972                           ;eusart.c: 105: eusartRxTail = 0;
  2973  0011AE  0E00               	movlw	0
  2974  0011B0  0100               	movlb	0	; force () banked
  2975  0011B2  6FB3               	movwf	_eusartRxTail& (0+255),b	;volatile
  2976                           
  2977                           ;eusart.c: 106: eusartRxCount = 0;
  2978  0011B4  0E00               	movlw	0
  2979  0011B6  0100               	movlb	0	; force () banked
  2980  0011B8  6FB2               	movwf	_eusartRxCount& (0+255),b	;volatile
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;eusart.c: 109: PIE1bits.RC1IE = 1;
  2984  0011BA  8A9D               	bsf	3997,5,c	;volatile
  2985                           
  2986                           ; BSR set to: 0
  2987  0011BC  0012               	return		;funcret
  2988  0011BE                     __end_of_EUSART_Initialize:
  2989                           	opt callstack 0
  2990                           
  2991 ;; *************** function _ADC_Initialize *****************
  2992 ;; Defined at:
  2993 ;;		line 58 in file "mcc_generated_files/adc.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;		None
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3007 ;;      Params:         0       0       0       0       0       0       0
  3008 ;;      Locals:         0       0       0       0       0       0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0
  3010 ;;      Totals:         0       0       0       0       0       0       0
  3011 ;;Total ram usage:        0 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    2
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_SYSTEM_Initialize
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text19
  3022  00136E                     __ptext19:
  3023                           	opt callstack 0
  3024  00136E                     _ADC_Initialize:
  3025                           	opt callstack 27
  3026                           
  3027                           ;adc.c: 63: ADCON0 = 0x01;
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;incstack = 0
  3031  00136E  0E01               	movlw	1
  3032  001370  6EC2               	movwf	4034,c	;volatile
  3033                           
  3034                           ;adc.c: 66: ADCON1 = 0x10;
  3035  001372  0E10               	movlw	16
  3036  001374  6EC1               	movwf	4033,c	;volatile
  3037                           
  3038                           ;adc.c: 69: ADCON2 = 0xA4;
  3039  001376  0EA4               	movlw	164
  3040  001378  6EC0               	movwf	4032,c	;volatile
  3041                           
  3042                           ;adc.c: 72: ADRESL = 0x00;
  3043  00137A  0E00               	movlw	0
  3044  00137C  6EC3               	movwf	4035,c	;volatile
  3045                           
  3046                           ;adc.c: 75: ADRESH = 0x00;
  3047  00137E  0E00               	movlw	0
  3048  001380  6EC4               	movwf	4036,c	;volatile
  3049  001382  0012               	return		;funcret
  3050  001384                     __end_of_ADC_Initialize:
  3051                           	opt callstack 0
  3052                           
  3053 ;; *************** function _LCD_inicio *****************
  3054 ;; Defined at:
  3055 ;;		line 8 in file "Lib_mias_all/Librerias_microchip/LCD_inicio.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;		None
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;		None
  3060 ;; Return value:  Size  Location     Type
  3061 ;;                  1    wreg      void 
  3062 ;; Registers used:
  3063 ;;		wreg, status,2, status,0, cstack
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3069 ;;      Params:         0       0       0       0       0       0       0
  3070 ;;      Locals:         0       0       0       0       0       0       0
  3071 ;;      Temps:          0       0       0       0       0       0       0
  3072 ;;      Totals:         0       0       0       0       0       0       0
  3073 ;;Total ram usage:        0 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; Hardware stack levels required when called:    5
  3076 ;; This function calls:
  3077 ;;		_DelayXLCD
  3078 ;;		_OpenXLCD
  3079 ;;		_WriteCmdXLCD
  3080 ;; This function is called by:
  3081 ;;		_main
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           	psect	text20
  3086  001340                     __ptext20:
  3087                           	opt callstack 0
  3088  001340                     _LCD_inicio:
  3089                           	opt callstack 25
  3090                           
  3091                           ;LCD_inicio.c: 11: OpenXLCD(0b00101100 & 0b00111000);
  3092                           
  3093                           ;incstack = 0
  3094  001340  0E28               	movlw	40
  3095  001342  EC4B  F006         	call	_OpenXLCD
  3096                           
  3097                           ;LCD_inicio.c: 12: WriteCmdXLCD(0b00000110);
  3098  001346  0E06               	movlw	6
  3099  001348  EC12  F008         	call	_WriteCmdXLCD
  3100                           
  3101                           ;LCD_inicio.c: 13: WriteCmdXLCD(0b00001110);
  3102  00134C  0E0E               	movlw	14
  3103  00134E  EC12  F008         	call	_WriteCmdXLCD
  3104                           
  3105                           ;LCD_inicio.c: 14: DelayXLCD();
  3106  001352  ECCD  F009         	call	_DelayXLCD	;wreg free
  3107  001356  0012               	return		;funcret
  3108  001358                     __end_of_LCD_inicio:
  3109                           	opt callstack 0
  3110                           
  3111 ;; *************** function _OpenXLCD *****************
  3112 ;; Defined at:
  3113 ;;		line 20 in file "Lib_mias_all/Librerias_microchip/openxlcd.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;  lcdtype         1    wreg     unsigned char 
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;  lcdtype         1    7[BANK0 ] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  1    wreg      void 
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3127 ;;      Params:         0       0       0       0       0       0       0
  3128 ;;      Locals:         0       1       0       0       0       0       0
  3129 ;;      Temps:          0       1       0       0       0       0       0
  3130 ;;      Totals:         0       2       0       0       0       0       0
  3131 ;;Total ram usage:        2 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    4
  3134 ;; This function calls:
  3135 ;;		_BusyXLCD
  3136 ;;		_SetDDRamAddr
  3137 ;;		_WriteCmdXLCD
  3138 ;; This function is called by:
  3139 ;;		_LCD_inicio
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           	psect	text21
  3144  000C96                     __ptext21:
  3145                           	opt callstack 0
  3146  000C96                     _OpenXLCD:
  3147                           	opt callstack 25
  3148                           
  3149                           ;incstack = 0
  3150                           ;OpenXLCD@lcdtype stored from wreg
  3151  000C96  0100               	movlb	0	; force () banked
  3152  000C98  6F67               	movwf	OpenXLCD@lcdtype& (0+255),b
  3153                           
  3154                           ;openxlcd.c: 32: PORTB &= 0xf0;
  3155  000C9A  0EF0               	movlw	240
  3156  000C9C  1681               	andwf	3969,f,c	;volatile
  3157                           
  3158                           ;openxlcd.c: 33: TRISB &= 0xF0;
  3159  000C9E  0EF0               	movlw	240
  3160  000CA0  1693               	andwf	3987,f,c	;volatile
  3161                           
  3162                           ;openxlcd.c: 36: TRISBbits.TRISB5 = 0;
  3163  000CA2  9A93               	bcf	3987,5,c	;volatile
  3164                           
  3165                           ;openxlcd.c: 37: TRISCbits.TRISC0 = 0;
  3166  000CA4  9094               	bcf	3988,0,c	;volatile
  3167                           
  3168                           ;openxlcd.c: 38: TRISBbits.TRISB6 = 0;
  3169  000CA6  9C93               	bcf	3987,6,c	;volatile
  3170                           
  3171                           ;openxlcd.c: 39: LATBbits.LATB5 = 0;
  3172  000CA8  9A8A               	bcf	3978,5,c	;volatile
  3173                           
  3174                           ;openxlcd.c: 40: LATCbits.LATC0 = 0;
  3175  000CAA  908B               	bcf	3979,0,c	;volatile
  3176                           
  3177                           ;openxlcd.c: 41: LATBbits.LATB6 = 0;
  3178  000CAC  9C8A               	bcf	3978,6,c	;volatile
  3179                           
  3180                           ;openxlcd.c: 45: _delay((unsigned long)((15)*(4000000/4000.0)));
  3181  000CAE  0E14               	movlw	20
  3182  000CB0  0100               	movlb	0	; force () banked
  3183  000CB2  6F66               	movwf	??_OpenXLCD& (0+255),b
  3184  000CB4  0E79               	movlw	121
  3185  000CB6                     u1347:
  3186  000CB6  2EE8               	decfsz	wreg,f,c
  3187  000CB8  D7FE               	bra	u1347
  3188  000CBA  2F66               	decfsz	??_OpenXLCD& (0+255),f,b
  3189  000CBC  D7FC               	bra	u1347
  3190  000CBE  F000 F000          	nop2	
  3191                           
  3192                           ;openxlcd.c: 50: WriteCmdXLCD(0x30);
  3193  000CC2  0E30               	movlw	48
  3194  000CC4  EC12  F008         	call	_WriteCmdXLCD
  3195                           
  3196                           ;openxlcd.c: 51: _delay((unsigned long)((5)*(4000000/4000.0)));
  3197  000CC8  0E07               	movlw	7
  3198  000CCA  0100               	movlb	0	; force () banked
  3199  000CCC  6F66               	movwf	??_OpenXLCD& (0+255),b
  3200  000CCE  0E7D               	movlw	125
  3201  000CD0                     u1357:
  3202  000CD0  2EE8               	decfsz	wreg,f,c
  3203  000CD2  D7FE               	bra	u1357
  3204  000CD4  2F66               	decfsz	??_OpenXLCD& (0+255),f,b
  3205  000CD6  D7FC               	bra	u1357
  3206                           
  3207                           ;openxlcd.c: 55: WriteCmdXLCD(0x30);
  3208  000CD8  0E30               	movlw	48
  3209  000CDA  EC12  F008         	call	_WriteCmdXLCD
  3210                           
  3211                           ;openxlcd.c: 56: _delay((unsigned long)((100)*(4000000/4000000.0)));
  3212  000CDE  0E21               	movlw	33
  3213  000CE0                     u1367:
  3214  000CE0  2EE8               	decfsz	wreg,f,c
  3215  000CE2  D7FE               	bra	u1367
  3216  000CE4  F000               	nop	
  3217                           
  3218                           ;openxlcd.c: 61: WriteCmdXLCD(0x30);
  3219  000CE6  0E30               	movlw	48
  3220  000CE8  EC12  F008         	call	_WriteCmdXLCD
  3221                           
  3222                           ;openxlcd.c: 62: _delay((unsigned long)((30)*(4000000/4000000.0)));
  3223  000CEC  0E0A               	movlw	10
  3224  000CEE                     u1377:
  3225  000CEE  2EE8               	decfsz	wreg,f,c
  3226  000CF0  D7FE               	bra	u1377
  3227  000CF2                     l1559:
  3228  000CF2  ECFD  F008         	call	_BusyXLCD	;wreg free
  3229  000CF6  0900               	iorlw	0
  3230  000CF8  A4D8               	btfss	status,2,c
  3231  000CFA  D7FB               	goto	l1559
  3232                           
  3233                           ;openxlcd.c: 67: WriteCmdXLCD(0x32);
  3234  000CFC  0E32               	movlw	50
  3235  000CFE  EC12  F008         	call	_WriteCmdXLCD
  3236  000D02                     l1563:
  3237  000D02  ECFD  F008         	call	_BusyXLCD	;wreg free
  3238  000D06  0900               	iorlw	0
  3239  000D08  A4D8               	btfss	status,2,c
  3240  000D0A  D7FB               	goto	l1563
  3241                           
  3242                           ;openxlcd.c: 73: WriteCmdXLCD(lcdtype);
  3243  000D0C  0100               	movlb	0	; force () banked
  3244  000D0E  5167               	movf	OpenXLCD@lcdtype& (0+255),w,b
  3245  000D10  EC12  F008         	call	_WriteCmdXLCD
  3246  000D14                     l1567:
  3247  000D14  ECFD  F008         	call	_BusyXLCD	;wreg free
  3248  000D18  0900               	iorlw	0
  3249  000D1A  A4D8               	btfss	status,2,c
  3250  000D1C  D7FB               	goto	l1567
  3251                           
  3252                           ;openxlcd.c: 77: WriteCmdXLCD(0b00001011&0b00001101&0b00001110);
  3253  000D1E  0E08               	movlw	8
  3254  000D20  EC12  F008         	call	_WriteCmdXLCD
  3255  000D24                     l1571:
  3256  000D24  ECFD  F008         	call	_BusyXLCD	;wreg free
  3257  000D28  0900               	iorlw	0
  3258  000D2A  A4D8               	btfss	status,2,c
  3259  000D2C  D7FB               	goto	l1571
  3260                           
  3261                           ;openxlcd.c: 79: WriteCmdXLCD(0b00001111&0b00001111&0b00001111);
  3262  000D2E  0E0F               	movlw	15
  3263  000D30  EC12  F008         	call	_WriteCmdXLCD
  3264  000D34                     l1575:
  3265  000D34  ECFD  F008         	call	_BusyXLCD	;wreg free
  3266  000D38  0900               	iorlw	0
  3267  000D3A  A4D8               	btfss	status,2,c
  3268  000D3C  D7FB               	goto	l1575
  3269                           
  3270                           ;openxlcd.c: 83: WriteCmdXLCD(0x01);
  3271  000D3E  0E01               	movlw	1
  3272  000D40  EC12  F008         	call	_WriteCmdXLCD
  3273  000D44                     l1579:
  3274  000D44  ECFD  F008         	call	_BusyXLCD	;wreg free
  3275  000D48  0900               	iorlw	0
  3276  000D4A  A4D8               	btfss	status,2,c
  3277  000D4C  D7FB               	goto	l1579
  3278                           
  3279                           ;openxlcd.c: 87: WriteCmdXLCD(0b00000100);
  3280  000D4E  0E04               	movlw	4
  3281  000D50  EC12  F008         	call	_WriteCmdXLCD
  3282  000D54                     l1583:
  3283  000D54  ECFD  F008         	call	_BusyXLCD	;wreg free
  3284  000D58  0900               	iorlw	0
  3285  000D5A  A4D8               	btfss	status,2,c
  3286  000D5C  D7FB               	goto	l1583
  3287                           
  3288                           ;openxlcd.c: 91: SetDDRamAddr(0x80);
  3289  000D5E  0E80               	movlw	128
  3290  000D60  ECB5  F007         	call	_SetDDRamAddr
  3291  000D64                     l1587:
  3292  000D64  ECFD  F008         	call	_BusyXLCD	;wreg free
  3293  000D68  0900               	iorlw	0
  3294  000D6A  A4D8               	btfss	status,2,c
  3295  000D6C  D7FB               	goto	l1587
  3296                           
  3297                           ;openxlcd.c: 95: WriteCmdXLCD(0b00001111&0b00001111&0b00001111);
  3298  000D6E  0E0F               	movlw	15
  3299  000D70  EC12  F008         	call	_WriteCmdXLCD
  3300  000D74  0012               	return		;funcret
  3301  000D76                     __end_of_OpenXLCD:
  3302                           	opt callstack 0
  3303                           
  3304 ;; *************** function _WriteCmdXLCD *****************
  3305 ;; Defined at:
  3306 ;;		line 13 in file "Lib_mias_all/Librerias_microchip/wcmdxlcd.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;  cmd             1    wreg     unsigned char 
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;  cmd             1    3[BANK0 ] unsigned char 
  3311 ;; Return value:  Size  Location     Type
  3312 ;;                  1    wreg      void 
  3313 ;; Registers used:
  3314 ;;		wreg, status,2, status,0, cstack
  3315 ;; Tracked objects:
  3316 ;;		On entry : 0/0
  3317 ;;		On exit  : 0/0
  3318 ;;		Unchanged: 0/0
  3319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3320 ;;      Params:         0       0       0       0       0       0       0
  3321 ;;      Locals:         0       1       0       0       0       0       0
  3322 ;;      Temps:          0       0       0       0       0       0       0
  3323 ;;      Totals:         0       1       0       0       0       0       0
  3324 ;;Total ram usage:        1 bytes
  3325 ;; Hardware stack levels used:    1
  3326 ;; Hardware stack levels required when called:    3
  3327 ;; This function calls:
  3328 ;;		_DelayFor18TCY
  3329 ;;		_DelayPORXLCD
  3330 ;; This function is called by:
  3331 ;;		_LCD_inicio
  3332 ;;		_OpenXLCD
  3333 ;;		_saludo
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           	psect	text22
  3338  001024                     __ptext22:
  3339                           	opt callstack 0
  3340  001024                     _WriteCmdXLCD:
  3341                           	opt callstack 26
  3342                           
  3343                           ;incstack = 0
  3344                           ;WriteCmdXLCD@cmd stored from wreg
  3345  001024  0100               	movlb	0	; force () banked
  3346  001026  6F63               	movwf	WriteCmdXLCD@cmd& (0+255),b
  3347                           
  3348                           ;wcmdxlcd.c: 32: TRISB &= 0xf0;
  3349  001028  0EF0               	movlw	240
  3350  00102A  1693               	andwf	3987,f,c	;volatile
  3351                           
  3352                           ;wcmdxlcd.c: 33: PORTB &= 0xf0;
  3353  00102C  0EF0               	movlw	240
  3354  00102E  1681               	andwf	3969,f,c	;volatile
  3355                           
  3356                           ;wcmdxlcd.c: 34: PORTB |= (cmd>>4)&0x0f;
  3357  001030  0100               	movlb	0	; force () banked
  3358  001032  3963               	swapf	WriteCmdXLCD@cmd& (0+255),w,b
  3359  001034  0B0F               	andlw	15
  3360  001036  0B0F               	andlw	15
  3361  001038  1281               	iorwf	3969,f,c	;volatile
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;wcmdxlcd.c: 36: LATBbits.LATB5 = 0;
  3365  00103A  9A8A               	bcf	3978,5,c	;volatile
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;wcmdxlcd.c: 37: LATCbits.LATC0 = 0;
  3369  00103C  908B               	bcf	3979,0,c	;volatile
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;wcmdxlcd.c: 38: DelayFor18TCY();
  3373  00103E  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3374                           
  3375                           ;wcmdxlcd.c: 39: LATBbits.LATB6 = 1;
  3376  001042  8C8A               	bsf	3978,6,c	;volatile
  3377                           
  3378                           ;wcmdxlcd.c: 40: DelayFor18TCY();
  3379  001044  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3380                           
  3381                           ;wcmdxlcd.c: 41: LATBbits.LATB6 = 0;
  3382  001048  9C8A               	bcf	3978,6,c	;volatile
  3383                           
  3384                           ;wcmdxlcd.c: 46: PORTB &= 0xf0;
  3385  00104A  0EF0               	movlw	240
  3386  00104C  1681               	andwf	3969,f,c	;volatile
  3387                           
  3388                           ;wcmdxlcd.c: 47: PORTB |= cmd&0x0f;
  3389  00104E  0100               	movlb	0	; force () banked
  3390  001050  5163               	movf	WriteCmdXLCD@cmd& (0+255),w,b
  3391  001052  0B0F               	andlw	15
  3392  001054  1281               	iorwf	3969,f,c	;volatile
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;wcmdxlcd.c: 49: DelayFor18TCY();
  3396  001056  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3397                           
  3398                           ;wcmdxlcd.c: 50: LATBbits.LATB6 = 1;
  3399  00105A  8C8A               	bsf	3978,6,c	;volatile
  3400                           
  3401                           ;wcmdxlcd.c: 51: DelayFor18TCY();
  3402  00105C  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3403                           
  3404                           ;wcmdxlcd.c: 52: LATBbits.LATB6 = 0;
  3405  001060  9C8A               	bcf	3978,6,c	;volatile
  3406                           
  3407                           ;wcmdxlcd.c: 56: TRISB |= 0x0f;
  3408  001062  0E0F               	movlw	15
  3409  001064  1293               	iorwf	3987,f,c	;volatile
  3410                           
  3411                           ;wcmdxlcd.c: 59: if (cmd == 0x01){
  3412  001066  0100               	movlb	0	; force () banked
  3413  001068  0563               	decf	WriteCmdXLCD@cmd& (0+255),w,b
  3414  00106A  A4D8               	btfss	status,2,c
  3415  00106C  0012               	return	
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;wcmdxlcd.c: 60: DelayPORXLCD();
  3419  00106E  ECC2  F009         	call	_DelayPORXLCD	;wreg free
  3420  001072  0012               	return		;funcret
  3421  001074                     __end_of_WriteCmdXLCD:
  3422                           	opt callstack 0
  3423                           
  3424 ;; *************** function _DelayPORXLCD *****************
  3425 ;; Defined at:
  3426 ;;		line 69 in file "Lib_mias_all/Librerias_microchip/delay_xlcd.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;		None
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;		None
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  1    wreg      void 
  3433 ;; Registers used:
  3434 ;;		wreg
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3440 ;;      Params:         0       0       0       0       0       0       0
  3441 ;;      Locals:         0       0       0       0       0       0       0
  3442 ;;      Temps:          0       1       0       0       0       0       0
  3443 ;;      Totals:         0       1       0       0       0       0       0
  3444 ;;Total ram usage:        1 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; Hardware stack levels required when called:    2
  3447 ;; This function calls:
  3448 ;;		Nothing
  3449 ;; This function is called by:
  3450 ;;		_WriteCmdXLCD
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text23
  3455  001384                     __ptext23:
  3456                           	opt callstack 0
  3457  001384                     _DelayPORXLCD:
  3458                           	opt callstack 26
  3459                           
  3460                           ;delay_xlcd.c: 70: _delay((unsigned long)((15)*(4000000/4000.0)));
  3461                           
  3462                           ;incstack = 0
  3463  001384  0E14               	movlw	20
  3464  001386  0100               	movlb	0	; force () banked
  3465  001388  6F62               	movwf	??_DelayPORXLCD& (0+255),b
  3466  00138A  0E79               	movlw	121
  3467  00138C                     u1387:
  3468  00138C  2EE8               	decfsz	wreg,f,c
  3469  00138E  D7FE               	bra	u1387
  3470  001390  2F62               	decfsz	??_DelayPORXLCD& (0+255),f,b
  3471  001392  D7FC               	bra	u1387
  3472  001394  F000 F000          	nop2	
  3473  001398  0012               	return		;funcret
  3474  00139A                     __end_of_DelayPORXLCD:
  3475                           	opt callstack 0
  3476                           
  3477 ;; *************** function _SetDDRamAddr *****************
  3478 ;; Defined at:
  3479 ;;		line 13 in file "Lib_mias_all/Librerias_microchip/setddram.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;  DDaddr          1    wreg     unsigned char 
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;  DDaddr          1    5[BANK0 ] unsigned char 
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, status,0, cstack
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3493 ;;      Params:         0       0       0       0       0       0       0
  3494 ;;      Locals:         0       1       0       0       0       0       0
  3495 ;;      Temps:          0       3       0       0       0       0       0
  3496 ;;      Totals:         0       4       0       0       0       0       0
  3497 ;;Total ram usage:        4 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    3
  3500 ;; This function calls:
  3501 ;;		_DelayFor18TCY
  3502 ;; This function is called by:
  3503 ;;		_OpenXLCD
  3504 ;;		_main
  3505 ;;		_saludo
  3506 ;;		_escribe_float
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           	psect	text24
  3511  000F6A                     __ptext24:
  3512                           	opt callstack 0
  3513  000F6A                     _SetDDRamAddr:
  3514                           	opt callstack 26
  3515                           
  3516                           ;incstack = 0
  3517                           ;SetDDRamAddr@DDaddr stored from wreg
  3518  000F6A  0100               	movlb	0	; force () banked
  3519  000F6C  6F65               	movwf	SetDDRamAddr@DDaddr& (0+255),b
  3520                           
  3521                           ;setddram.c: 32: TRISB &= 0xf0;
  3522  000F6E  0EF0               	movlw	240
  3523  000F70  1693               	andwf	3987,f,c	;volatile
  3524                           
  3525                           ;setddram.c: 33: PORTB &= 0xf0;
  3526  000F72  0EF0               	movlw	240
  3527  000F74  1681               	andwf	3969,f,c	;volatile
  3528                           
  3529                           ;setddram.c: 34: PORTB |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  3530  000F76  0100               	movlb	0	; force () banked
  3531  000F78  5165               	movf	SetDDRamAddr@DDaddr& (0+255),w,b
  3532  000F7A  0100               	movlb	0	; force () banked
  3533  000F7C  6F62               	movwf	??_SetDDRamAddr& (0+255),b
  3534  000F7E  6B63               	clrf	(??_SetDDRamAddr+1)& (0+255),b
  3535  000F80  0E80               	movlw	128
  3536  000F82  1362               	iorwf	??_SetDDRamAddr& (0+255),f,b
  3537  000F84  0E00               	movlw	0
  3538  000F86  1363               	iorwf	(??_SetDDRamAddr+1)& (0+255),f,b
  3539  000F88  0E04               	movlw	4
  3540  000F8A  6F64               	movwf	(??_SetDDRamAddr+2)& (0+255),b
  3541  000F8C                     u65:
  3542  000F8C  3563               	rlcf	(??_SetDDRamAddr+1)& (0+255),w,b
  3543  000F8E  3363               	rrcf	(??_SetDDRamAddr+1)& (0+255),f,b
  3544  000F90  3362               	rrcf	??_SetDDRamAddr& (0+255),f,b
  3545  000F92  2F64               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,b
  3546  000F94  D7FB               	goto	u65
  3547  000F96  5162               	movf	??_SetDDRamAddr& (0+255),w,b
  3548  000F98  0B0F               	andlw	15
  3549  000F9A  1281               	iorwf	3969,f,c	;volatile
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;setddram.c: 36: LATBbits.LATB5 = 0;
  3553  000F9C  9A8A               	bcf	3978,5,c	;volatile
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;setddram.c: 37: LATCbits.LATC0 = 0;
  3557  000F9E  908B               	bcf	3979,0,c	;volatile
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;setddram.c: 38: DelayFor18TCY();
  3561  000FA0  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3562                           
  3563                           ;setddram.c: 39: LATBbits.LATB6 = 1;
  3564  000FA4  8C8A               	bsf	3978,6,c	;volatile
  3565                           
  3566                           ;setddram.c: 40: DelayFor18TCY();
  3567  000FA6  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3568                           
  3569                           ;setddram.c: 41: LATBbits.LATB6 = 0;
  3570  000FAA  9C8A               	bcf	3978,6,c	;volatile
  3571                           
  3572                           ;setddram.c: 46: PORTB &= 0xf0;
  3573  000FAC  0EF0               	movlw	240
  3574  000FAE  1681               	andwf	3969,f,c	;volatile
  3575                           
  3576                           ;setddram.c: 47: PORTB |= (DDaddr&0x0f);
  3577  000FB0  0100               	movlb	0	; force () banked
  3578  000FB2  5165               	movf	SetDDRamAddr@DDaddr& (0+255),w,b
  3579  000FB4  0B0F               	andlw	15
  3580  000FB6  1281               	iorwf	3969,f,c	;volatile
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;setddram.c: 49: DelayFor18TCY();
  3584  000FB8  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3585                           
  3586                           ;setddram.c: 50: LATBbits.LATB6 = 1;
  3587  000FBC  8C8A               	bsf	3978,6,c	;volatile
  3588                           
  3589                           ;setddram.c: 51: DelayFor18TCY();
  3590  000FBE  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3591                           
  3592                           ;setddram.c: 52: LATBbits.LATB6 = 0;
  3593  000FC2  9C8A               	bcf	3978,6,c	;volatile
  3594                           
  3595                           ;setddram.c: 56: TRISB |= 0x0f;
  3596  000FC4  0E0F               	movlw	15
  3597  000FC6  1293               	iorwf	3987,f,c	;volatile
  3598  000FC8  0012               	return		;funcret
  3599  000FCA                     __end_of_SetDDRamAddr:
  3600                           	opt callstack 0
  3601                           
  3602 ;; *************** function _BusyXLCD *****************
  3603 ;; Defined at:
  3604 ;;		line 11 in file "Lib_mias_all/Librerias_microchip/busyxlcd.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;		None
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;		None
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  1    wreg      unsigned char 
  3611 ;; Registers used:
  3612 ;;		wreg, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3618 ;;      Params:         0       0       0       0       0       0       0
  3619 ;;      Locals:         0       0       0       0       0       0       0
  3620 ;;      Temps:          0       0       0       0       0       0       0
  3621 ;;      Totals:         0       0       0       0       0       0       0
  3622 ;;Total ram usage:        0 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    3
  3625 ;; This function calls:
  3626 ;;		_DelayFor18TCY
  3627 ;; This function is called by:
  3628 ;;		_OpenXLCD
  3629 ;;		_putrsXLCD
  3630 ;;		_saludo
  3631 ;;		_putsXLCD
  3632 ;;		_eco
  3633 ;;		_escribe_float
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           	psect	text25
  3638  0011FA                     __ptext25:
  3639                           	opt callstack 0
  3640  0011FA                     _BusyXLCD:
  3641                           	opt callstack 25
  3642                           
  3643                           ;busyxlcd.c: 13: LATBbits.LATB5 = 1;
  3644                           
  3645                           ;incstack = 0
  3646  0011FA  8A8A               	bsf	3978,5,c	;volatile
  3647                           
  3648                           ;busyxlcd.c: 14: LATCbits.LATC0 = 0;
  3649  0011FC  908B               	bcf	3979,0,c	;volatile
  3650                           
  3651                           ;busyxlcd.c: 15: DelayFor18TCY();
  3652  0011FE  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3653                           
  3654                           ;busyxlcd.c: 16: LATBbits.LATB6 = 1;
  3655  001202  8C8A               	bsf	3978,6,c	;volatile
  3656                           
  3657                           ;busyxlcd.c: 17: DelayFor18TCY();
  3658  001204  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3659                           
  3660                           ;busyxlcd.c: 35: if(PORTB&0x08)
  3661  001208  A681               	btfss	3969,3,c	;volatile
  3662  00120A  D00A               	goto	l11
  3663                           
  3664                           ;busyxlcd.c: 37: {;busyxlcd.c: 38: LATBbits.LATB6 = 0;
  3665  00120C  9C8A               	bcf	3978,6,c	;volatile
  3666                           
  3667                           ;busyxlcd.c: 39: DelayFor18TCY();
  3668  00120E  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3669                           
  3670                           ;busyxlcd.c: 40: LATBbits.LATB6 = 1;
  3671  001212  8C8A               	bsf	3978,6,c	;volatile
  3672                           
  3673                           ;busyxlcd.c: 41: DelayFor18TCY();
  3674  001214  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3675                           
  3676                           ;busyxlcd.c: 42: LATBbits.LATB6 = 0;
  3677  001218  9C8A               	bcf	3978,6,c	;volatile
  3678                           
  3679                           ;busyxlcd.c: 43: LATBbits.LATB5 = 0;
  3680  00121A  9A8A               	bcf	3978,5,c	;volatile
  3681                           
  3682                           ;busyxlcd.c: 44: return 1;
  3683  00121C  0E01               	movlw	1
  3684  00121E  0012               	return	
  3685  001220                     l11:
  3686                           
  3687                           ;busyxlcd.c: 46: else;busyxlcd.c: 47: {;busyxlcd.c: 48: LATBbits.LATB6 = 0;
  3688  001220  9C8A               	bcf	3978,6,c	;volatile
  3689                           
  3690                           ;busyxlcd.c: 49: DelayFor18TCY();
  3691  001222  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3692                           
  3693                           ;busyxlcd.c: 50: LATBbits.LATB6 = 1;
  3694  001226  8C8A               	bsf	3978,6,c	;volatile
  3695                           
  3696                           ;busyxlcd.c: 51: DelayFor18TCY();
  3697  001228  ECDD  F009         	call	_DelayFor18TCY	;wreg free
  3698                           
  3699                           ;busyxlcd.c: 52: LATBbits.LATB6 = 0;
  3700  00122C  9C8A               	bcf	3978,6,c	;volatile
  3701                           
  3702                           ;busyxlcd.c: 53: LATBbits.LATB5 = 0;
  3703  00122E  9A8A               	bcf	3978,5,c	;volatile
  3704                           
  3705                           ;busyxlcd.c: 54: return 0;
  3706  001230  0E00               	movlw	0
  3707  001232  0012               	return		;funcret
  3708  001234                     __end_of_BusyXLCD:
  3709                           	opt callstack 0
  3710                           
  3711 ;; *************** function _DelayFor18TCY *****************
  3712 ;; Defined at:
  3713 ;;		line 62 in file "Lib_mias_all/Librerias_microchip/delay_xlcd.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;		None
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;		None
  3718 ;; Return value:  Size  Location     Type
  3719 ;;                  1    wreg      void 
  3720 ;; Registers used:
  3721 ;;		None
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3727 ;;      Params:         0       0       0       0       0       0       0
  3728 ;;      Locals:         0       0       0       0       0       0       0
  3729 ;;      Temps:          0       0       0       0       0       0       0
  3730 ;;      Totals:         0       0       0       0       0       0       0
  3731 ;;Total ram usage:        0 bytes
  3732 ;; Hardware stack levels used:    1
  3733 ;; Hardware stack levels required when called:    2
  3734 ;; This function calls:
  3735 ;;		Nothing
  3736 ;; This function is called by:
  3737 ;;		_BusyXLCD
  3738 ;;		_SetDDRamAddr
  3739 ;;		_WriteCmdXLCD
  3740 ;;		_WriteDataXLCD
  3741 ;;		_ReadAddrXLCD
  3742 ;;		_ReadDataXLCD
  3743 ;;		_SetCGRamAddr
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           	psect	text26
  3748  0013BA                     __ptext26:
  3749                           	opt callstack 0
  3750  0013BA                     _DelayFor18TCY:
  3751                           	opt callstack 25
  3752                           
  3753                           ;delay_xlcd.c: 64: _delay((unsigned long)((5)*(4000000/4000000.0)));
  3754                           
  3755                           ;incstack = 0
  3756  0013BA  F000 F000          	nop2		;2 cycle nop
  3757  0013BE  F000 F000          	nop2		;2 cycle nop
  3758  0013C2  F000               	nop	
  3759  0013C4  0012               	return		;funcret
  3760  0013C6                     __end_of_DelayFor18TCY:
  3761                           	opt callstack 0
  3762                           
  3763 ;; *************** function _DelayXLCD *****************
  3764 ;; Defined at:
  3765 ;;		line 75 in file "Lib_mias_all/Librerias_microchip/delay_xlcd.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;		None
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;		None
  3770 ;; Return value:  Size  Location     Type
  3771 ;;                  1    wreg      void 
  3772 ;; Registers used:
  3773 ;;		wreg
  3774 ;; Tracked objects:
  3775 ;;		On entry : 0/0
  3776 ;;		On exit  : 0/0
  3777 ;;		Unchanged: 0/0
  3778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3779 ;;      Params:         0       0       0       0       0       0       0
  3780 ;;      Locals:         0       0       0       0       0       0       0
  3781 ;;      Temps:          0       1       0       0       0       0       0
  3782 ;;      Totals:         0       1       0       0       0       0       0
  3783 ;;Total ram usage:        1 bytes
  3784 ;; Hardware stack levels used:    1
  3785 ;; Hardware stack levels required when called:    2
  3786 ;; This function calls:
  3787 ;;		Nothing
  3788 ;; This function is called by:
  3789 ;;		_LCD_inicio
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text27
  3794  00139A                     __ptext27:
  3795                           	opt callstack 0
  3796  00139A                     _DelayXLCD:
  3797                           	opt callstack 27
  3798                           
  3799                           ;delay_xlcd.c: 76: _delay((unsigned long)((5)*(4000000/4000.0)));
  3800                           
  3801                           ;incstack = 0
  3802  00139A  0E07               	movlw	7
  3803  00139C  0100               	movlb	0	; force () banked
  3804  00139E  6F62               	movwf	??_DelayXLCD& (0+255),b
  3805  0013A0  0E7D               	movlw	125
  3806  0013A2                     u1397:
  3807  0013A2  2EE8               	decfsz	wreg,f,c
  3808  0013A4  D7FE               	bra	u1397
  3809  0013A6  2F62               	decfsz	??_DelayXLCD& (0+255),f,b
  3810  0013A8  D7FC               	bra	u1397
  3811  0013AA  0012               	return		;funcret
  3812  0013AC                     __end_of_DelayXLCD:
  3813                           	opt callstack 0
  3814                           
  3815 ;; *************** function _EUSART_Read *****************
  3816 ;; Defined at:
  3817 ;;		line 112 in file "mcc_generated_files/eusart.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;		None
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;  readValue       1    2[BANK0 ] unsigned char 
  3822 ;; Return value:  Size  Location     Type
  3823 ;;                  1    wreg      unsigned char 
  3824 ;; Registers used:
  3825 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3826 ;; Tracked objects:
  3827 ;;		On entry : 0/0
  3828 ;;		On exit  : 0/0
  3829 ;;		Unchanged: 0/0
  3830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3831 ;;      Params:         0       0       0       0       0       0       0
  3832 ;;      Locals:         0       1       0       0       0       0       0
  3833 ;;      Temps:          0       0       0       0       0       0       0
  3834 ;;      Totals:         0       1       0       0       0       0       0
  3835 ;;Total ram usage:        1 bytes
  3836 ;; Hardware stack levels used:    1
  3837 ;; Hardware stack levels required when called:    2
  3838 ;; This function calls:
  3839 ;;		Nothing
  3840 ;; This function is called by:
  3841 ;;		_main
  3842 ;;		_getch
  3843 ;;		_eco
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           	psect	text28
  3848  0010FC                     __ptext28:
  3849                           	opt callstack 0
  3850  0010FC                     _EUSART_Read:
  3851                           	opt callstack 28
  3852                           
  3853                           ;eusart.c: 114: uint8_t readValue = 0;
  3854                           
  3855                           ;incstack = 0
  3856  0010FC  0E00               	movlw	0
  3857  0010FE  0100               	movlb	0	; force () banked
  3858  001100  6F62               	movwf	EUSART_Read@readValue& (0+255),b
  3859  001102                     l1825:
  3860                           
  3861                           ; BSR set to: 0
  3862  001102  0100               	movlb	0	; force () banked
  3863  001104  51B2               	movf	_eusartRxCount& (0+255),w,b	;volatile
  3864  001106  B4D8               	btfsc	status,2,c
  3865  001108  D7FC               	goto	l1825
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;eusart.c: 118: };eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  3869  00110A  0EAA               	movlw	low _eusartRxBuffer
  3870  00110C  0100               	movlb	0	; force () banked
  3871  00110E  25B3               	addwf	_eusartRxTail& (0+255),w,b	;volatile
  3872  001110  6ED9               	movwf	fsr2l,c
  3873  001112  6ADA               	clrf	fsr2h,c
  3874  001114  0E00               	movlw	high _eusartRxBuffer
  3875  001116  22DA               	addwfc	fsr2h,f,c
  3876  001118  50DF               	movf	indf2,w,c
  3877  00111A  0100               	movlb	0	; force () banked
  3878  00111C  6F62               	movwf	EUSART_Read@readValue& (0+255),b
  3879                           
  3880                           ; BSR set to: 0
  3881  00111E  0100               	movlb	0	; force () banked
  3882  001120  2BB3               	incf	_eusartRxTail& (0+255),f,b	;volatile
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  3886  001122  0E07               	movlw	7
  3887  001124  0100               	movlb	0	; force () banked
  3888  001126  65B3               	cpfsgt	_eusartRxTail& (0+255),b	;volatile
  3889  001128  D003               	goto	l1835
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;eusart.c: 122: {;eusart.c: 123: eusartRxTail = 0;
  3893  00112A  0E00               	movlw	0
  3894  00112C  0100               	movlb	0	; force () banked
  3895  00112E  6FB3               	movwf	_eusartRxTail& (0+255),b	;volatile
  3896  001130                     l1835:
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;eusart.c: 124: };eusart.c: 125: PIE1bits.RC1IE = 0;
  3900  001130  9A9D               	bcf	3997,5,c	;volatile
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;eusart.c: 126: eusartRxCount--;
  3904  001132  0100               	movlb	0	; force () banked
  3905  001134  07B2               	decf	_eusartRxCount& (0+255),f,b	;volatile
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;eusart.c: 127: PIE1bits.RC1IE = 1;
  3909  001136  8A9D               	bsf	3997,5,c	;volatile
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;eusart.c: 129: return readValue;
  3913  001138  0100               	movlb	0	; force () banked
  3914  00113A  5162               	movf	EUSART_Read@readValue& (0+255),w,b
  3915                           
  3916                           ; BSR set to: 0
  3917  00113C  0012               	return		;funcret
  3918  00113E                     __end_of_EUSART_Read:
  3919                           	opt callstack 0
  3920                           
  3921 ;; *************** function _ADC_GetConversion *****************
  3922 ;; Defined at:
  3923 ;;		line 106 in file "mcc_generated_files/adc.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;  channel         1    wreg     enum E2300
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  channel         1    6[BANK0 ] enum E2300
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  2    2[BANK0 ] unsigned int 
  3930 ;; Registers used:
  3931 ;;		wreg, status,2, status,0
  3932 ;; Tracked objects:
  3933 ;;		On entry : 0/0
  3934 ;;		On exit  : 0/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3937 ;;      Params:         0       2       0       0       0       0       0
  3938 ;;      Locals:         0       1       0       0       0       0       0
  3939 ;;      Temps:          0       2       0       0       0       0       0
  3940 ;;      Totals:         0       5       0       0       0       0       0
  3941 ;;Total ram usage:        5 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; Hardware stack levels required when called:    2
  3944 ;; This function calls:
  3945 ;;		Nothing
  3946 ;; This function is called by:
  3947 ;;		_main
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           	psect	text29
  3952  0011BE                     __ptext29:
  3953                           	opt callstack 0
  3954  0011BE                     _ADC_GetConversion:
  3955                           	opt callstack 28
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;incstack = 0
  3959                           ;ADC_GetConversion@channel stored from wreg
  3960  0011BE  0100               	movlb	0	; force () banked
  3961  0011C0  6F66               	movwf	ADC_GetConversion@channel& (0+255),b
  3962                           
  3963                           ;adc.c: 109: ADCON0bits.CHS = channel;
  3964  0011C2  C066  F064         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  3965  0011C6  0100               	movlb	0	; force () banked
  3966  0011C8  4764               	rlncf	??_ADC_GetConversion& (0+255),f,b
  3967  0011CA  4764               	rlncf	??_ADC_GetConversion& (0+255),f,b
  3968  0011CC  50C2               	movf	4034,w,c	;volatile
  3969  0011CE  1964               	xorwf	??_ADC_GetConversion& (0+255),w,b
  3970  0011D0  0BC3               	andlw	-61
  3971  0011D2  1964               	xorwf	??_ADC_GetConversion& (0+255),w,b
  3972  0011D4  6EC2               	movwf	4034,c	;volatile
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;adc.c: 112: ADCON0bits.ADON = 1;
  3976  0011D6  80C2               	bsf	4034,0,c	;volatile
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
  3980  0011D8  82C2               	bsf	4034,1,c	;volatile
  3981  0011DA                     l213:
  3982  0011DA  B2C2               	btfsc	4034,1,c	;volatile
  3983  0011DC  D7FE               	goto	l213
  3984                           
  3985                           ;adc.c: 120: };adc.c: 123: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  3986  0011DE  50C4               	movf	4036,w,c	;volatile
  3987  0011E0  0100               	movlb	0	; force () banked
  3988  0011E2  6F65               	movwf	(??_ADC_GetConversion+1)& (0+255),b
  3989  0011E4  6B64               	clrf	??_ADC_GetConversion& (0+255),b
  3990  0011E6  50C3               	movf	4035,w,c	;volatile
  3991  0011E8  2564               	addwf	??_ADC_GetConversion& (0+255),w,b
  3992  0011EA  0100               	movlb	0	; force () banked
  3993  0011EC  6F62               	movwf	?_ADC_GetConversion& (0+255),b
  3994  0011EE  0E00               	movlw	0
  3995  0011F0  0100               	movlb	0	; force () banked
  3996  0011F2  2165               	addwfc	(??_ADC_GetConversion+1)& (0+255),w,b
  3997  0011F4  0100               	movlb	0	; force () banked
  3998  0011F6  6F63               	movwf	(?_ADC_GetConversion+1)& (0+255),b
  3999                           
  4000                           ; BSR set to: 0
  4001  0011F8  0012               	return		;funcret
  4002  0011FA                     __end_of_ADC_GetConversion:
  4003                           	opt callstack 0
  4004                           
  4005 ;; *************** function _INTERRUPT_InterruptManager *****************
  4006 ;; Defined at:
  4007 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;		None
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;		None
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  1    wreg      void 
  4014 ;; Registers used:
  4015 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4016 ;; Tracked objects:
  4017 ;;		On entry : 0/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4021 ;;      Params:         0       0       0       0       0       0       0
  4022 ;;      Locals:         0       0       0       0       0       0       0
  4023 ;;      Temps:          0       2       0       0       0       0       0
  4024 ;;      Totals:         0       2       0       0       0       0       0
  4025 ;;Total ram usage:        2 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; Hardware stack levels required when called:    1
  4028 ;; This function calls:
  4029 ;;		_EUSART_Receive_ISR
  4030 ;;		_EUSART_Transmit_ISR
  4031 ;; This function is called by:
  4032 ;;		Interrupt level 2
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	intcode
  4037  000008                     __pintcode:
  4038                           	opt callstack 0
  4039  000008                     _INTERRUPT_InterruptManager:
  4040                           	opt callstack 25
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;incstack = 0
  4044  000008  8201               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4045  00000A  CFD9 F060          	movff	fsr2l,??_INTERRUPT_InterruptManager
  4046  00000E  CFDA F061          	movff	fsr2h,??_INTERRUPT_InterruptManager+1
  4047                           
  4048                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bits.TX1
      +                          IF == 1)
  4049  000012  BCF2               	btfsc	4082,6,c	;volatile
  4050  000014  A89D               	btfss	3997,4,c	;volatile
  4051  000016  D003               	goto	i2l2009
  4052  000018  B89E               	btfsc	3998,4,c	;volatile
  4053                           
  4054                           ;interrupt_manager.c: 61: {;interrupt_manager.c: 62: EUSART_Transmit_ISR();
  4055  00001A  EC1A  F009         	call	_EUSART_Transmit_ISR	;wreg free
  4056  00001E                     i2l2009:
  4057                           
  4058                           ;interrupt_manager.c: 63: };interrupt_manager.c: 64: if(INTCONbits.PEIE == 1 && PIE1bits
      +                          .RC1IE == 1 && PIR1bits.RC1IF == 1)
  4059  00001E  BCF2               	btfsc	4082,6,c	;volatile
  4060  000020  AA9D               	btfss	3997,5,c	;volatile
  4061  000022  D003               	goto	i2l260
  4062  000024  BA9E               	btfsc	3998,5,c	;volatile
  4063                           
  4064                           ;interrupt_manager.c: 65: {;interrupt_manager.c: 66: EUSART_Receive_ISR();
  4065  000026  EC35  F009         	call	_EUSART_Receive_ISR	;wreg free
  4066  00002A                     i2l260:
  4067  00002A  C061  FFDA         	movff	??_INTERRUPT_InterruptManager+1,fsr2h
  4068  00002E  C060  FFD9         	movff	??_INTERRUPT_InterruptManager,fsr2l
  4069  000032  9201               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4070  000034  0011               	retfie		f
  4071  000036                     __end_of_INTERRUPT_InterruptManager:
  4072                           	opt callstack 0
  4073                           
  4074 ;; *************** function _EUSART_Transmit_ISR *****************
  4075 ;; Defined at:
  4076 ;;		line 165 in file "mcc_generated_files/eusart.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;		None
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;		None
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  1    wreg      void 
  4083 ;; Registers used:
  4084 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4090 ;;      Params:         0       0       0       0       0       0       0
  4091 ;;      Locals:         0       0       0       0       0       0       0
  4092 ;;      Temps:          0       0       0       0       0       0       0
  4093 ;;      Totals:         0       0       0       0       0       0       0
  4094 ;;Total ram usage:        0 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; This function calls:
  4097 ;;		Nothing
  4098 ;; This function is called by:
  4099 ;;		_INTERRUPT_InterruptManager
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           	psect	text31
  4104  001234                     __ptext31:
  4105                           	opt callstack 0
  4106  001234                     _EUSART_Transmit_ISR:
  4107                           	opt callstack 25
  4108                           
  4109                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  4110                           
  4111                           ;incstack = 0
  4112  001234  0E10               	movlw	16
  4113  001236  0100               	movlb	0	; force () banked
  4114  001238  61C9               	cpfslt	_eusartTxBufferRemaining& (0+255),b	;volatile
  4115  00123A  D015               	goto	i2l322
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;eusart.c: 170: {;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
  4119  00123C  0E9A               	movlw	low _eusartTxBuffer
  4120  00123E  0100               	movlb	0	; force () banked
  4121  001240  25B5               	addwf	_eusartTxTail& (0+255),w,b	;volatile
  4122  001242  6ED9               	movwf	fsr2l,c
  4123  001244  6ADA               	clrf	fsr2h,c
  4124  001246  0E00               	movlw	high _eusartTxBuffer
  4125  001248  22DA               	addwfc	fsr2h,f,c
  4126  00124A  50DF               	movf	indf2,w,c
  4127  00124C  6EAD               	movwf	4013,c	;volatile
  4128                           
  4129                           ; BSR set to: 0
  4130  00124E  0100               	movlb	0	; force () banked
  4131  001250  2BB5               	incf	_eusartTxTail& (0+255),f,b	;volatile
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4135  001252  0E0F               	movlw	15
  4136  001254  0100               	movlb	0	; force () banked
  4137  001256  65B5               	cpfsgt	_eusartTxTail& (0+255),b	;volatile
  4138  001258  D003               	goto	i2l1807
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;eusart.c: 173: {;eusart.c: 174: eusartTxTail = 0;
  4142  00125A  0E00               	movlw	0
  4143  00125C  0100               	movlb	0	; force () banked
  4144  00125E  6FB5               	movwf	_eusartTxTail& (0+255),b	;volatile
  4145  001260                     i2l1807:
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;eusart.c: 175: };eusart.c: 176: eusartTxBufferRemaining++;
  4149  001260  0100               	movlb	0	; force () banked
  4150  001262  2BC9               	incf	_eusartTxBufferRemaining& (0+255),f,b	;volatile
  4151                           
  4152                           ;eusart.c: 177: }
  4153  001264  0012               	return	
  4154  001266                     i2l322:
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;eusart.c: 178: else;eusart.c: 179: {;eusart.c: 180: PIE1bits.TX1IE = 0;
  4158  001266  989D               	bcf	3997,4,c	;volatile
  4159                           
  4160                           ; BSR set to: 0
  4161  001268  0012               	return		;funcret
  4162  00126A                     __end_of_EUSART_Transmit_ISR:
  4163                           	opt callstack 0
  4164                           
  4165 ;; *************** function _EUSART_Receive_ISR *****************
  4166 ;; Defined at:
  4167 ;;		line 184 in file "mcc_generated_files/eusart.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;		None
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;		None
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  1    wreg      void 
  4174 ;; Registers used:
  4175 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4181 ;;      Params:         0       0       0       0       0       0       0
  4182 ;;      Locals:         0       0       0       0       0       0       0
  4183 ;;      Temps:          0       0       0       0       0       0       0
  4184 ;;      Totals:         0       0       0       0       0       0       0
  4185 ;;Total ram usage:        0 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; This function calls:
  4188 ;;		Nothing
  4189 ;; This function is called by:
  4190 ;;		_INTERRUPT_InterruptManager
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text32
  4195  00126A                     __ptext32:
  4196                           	opt callstack 0
  4197  00126A                     _EUSART_Receive_ISR:
  4198                           	opt callstack 25
  4199                           
  4200                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;incstack = 0
  4204  00126A  A2AB               	btfss	4011,1,c	;volatile
  4205  00126C  D002               	goto	i2l1813
  4206                           
  4207                           ;eusart.c: 188: {;eusart.c: 191: RCSTAbits.CREN = 0;
  4208  00126E  98AB               	bcf	4011,4,c	;volatile
  4209                           
  4210                           ;eusart.c: 192: RCSTAbits.CREN = 1;
  4211  001270  88AB               	bsf	4011,4,c	;volatile
  4212  001272                     i2l1813:
  4213                           
  4214                           ;eusart.c: 193: };eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
  4215  001272  0EAA               	movlw	low _eusartRxBuffer
  4216  001274  0100               	movlb	0	; force () banked
  4217  001276  25B4               	addwf	_eusartRxHead& (0+255),w,b	;volatile
  4218  001278  6ED9               	movwf	fsr2l,c
  4219  00127A  6ADA               	clrf	fsr2h,c
  4220  00127C  0E00               	movlw	high _eusartRxBuffer
  4221  00127E  22DA               	addwfc	fsr2h,f,c
  4222  001280  CFAE FFDF          	movff	4014,indf2	;volatile
  4223                           
  4224                           ; BSR set to: 0
  4225  001284  0100               	movlb	0	; force () banked
  4226  001286  2BB4               	incf	_eusartRxHead& (0+255),f,b	;volatile
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4230  001288  0E07               	movlw	7
  4231  00128A  0100               	movlb	0	; force () banked
  4232  00128C  65B4               	cpfsgt	_eusartRxHead& (0+255),b	;volatile
  4233  00128E  D003               	goto	i2l1821
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;eusart.c: 198: {;eusart.c: 199: eusartRxHead = 0;
  4237  001290  0E00               	movlw	0
  4238  001292  0100               	movlb	0	; force () banked
  4239  001294  6FB4               	movwf	_eusartRxHead& (0+255),b	;volatile
  4240  001296                     i2l1821:
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;eusart.c: 200: };eusart.c: 201: eusartRxCount++;
  4244  001296  0100               	movlb	0	; force () banked
  4245  001298  2BB2               	incf	_eusartRxCount& (0+255),f,b	;volatile
  4246                           
  4247                           ; BSR set to: 0
  4248  00129A  0012               	return		;funcret
  4249  00129C                     __end_of_EUSART_Receive_ISR:
  4250                           	opt callstack 0
  4251                           
  4252                           	psect	text33
  4253  000000                     __ptext33:
  4254                           	opt callstack 0
  4255                           
  4256                           	psect	param0
  4257  0000                     
  4258                           	psect	temp
  4259  000001                     btemp:
  4260                           	opt callstack 0
  4261  000001                     	ds	1
  4262  0000                     int$flags	set	btemp
  4263  0000                     wtemp8	set	btemp+1
  4264  0000                     ttemp5	set	btemp+1
  4265  0000                     ttemp6	set	btemp+4
  4266  0000                     ttemp7	set	btemp+8
  4267                           tosu	equ	0xFFF
  4268                           tosh	equ	0xFFE
  4269                           tosl	equ	0xFFD
  4270                           stkptr	equ	0xFFC
  4271                           pclatu	equ	0xFFB
  4272                           pclath	equ	0xFFA
  4273                           pcl	equ	0xFF9
  4274                           tblptru	equ	0xFF8
  4275                           tblptrh	equ	0xFF7
  4276                           tblptrl	equ	0xFF6
  4277                           tablat	equ	0xFF5
  4278                           prodh	equ	0xFF4
  4279                           prodl	equ	0xFF3
  4280                           indf0	equ	0xFEF
  4281                           postinc0	equ	0xFEE
  4282                           postdec0	equ	0xFED
  4283                           preinc0	equ	0xFEC
  4284                           plusw0	equ	0xFEB
  4285                           fsr0h	equ	0xFEA
  4286                           fsr0l	equ	0xFE9
  4287                           wreg	equ	0xFE8
  4288                           indf1	equ	0xFE7
  4289                           postinc1	equ	0xFE6
  4290                           postdec1	equ	0xFE5
  4291                           preinc1	equ	0xFE4
  4292                           plusw1	equ	0xFE3
  4293                           fsr1h	equ	0xFE2
  4294                           fsr1l	equ	0xFE1
  4295                           bsr	equ	0xFE0
  4296                           indf2	equ	0xFDF
  4297                           postinc2	equ	0xFDE
  4298                           postdec2	equ	0xFDD
  4299                           preinc2	equ	0xFDC
  4300                           plusw2	equ	0xFDB
  4301                           fsr2h	equ	0xFDA
  4302                           fsr2l	equ	0xFD9
  4303                           status	equ	0xFD8


Data Sizes:
    Strings     62
    Constant    72
    Data        0
    BSS         46
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      0       0
    BANK0           160     58     106
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoat_mio@buf(BANK0[17]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoat_mio@buf(BANK0[17]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[11]), STR_1(CODE[4]), 

    S1375__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1375__prbuf$ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoat_mio@buf(BANK0[17]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoat_mio@buf(BANK0[17]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    sp__ftoat_mio	PTR unsigned char  size(2) Largest target is 17
		 -> ftoat_mio@buf(BANK0[17]), 

    putrsXLCD@buffer	PTR unsigned char  size(3) Largest target is 17
		 -> STR_5(CODE[1]), ftoat_mio@buf(BANK0[17]), STR_3(CODE[14]), STR_2(CODE[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf
    _saludo->_SetDDRamAddr
    _saludo->_putrsXLCD
    _putrsXLCD->_WriteDataXLCD
    _printf->__doprnt
    __doprnt->___llmod
    _putch->_EUSART_Write
    ___llmod->___lldiv
    _LCD_inicio->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr
    _WriteCmdXLCD->_DelayPORXLCD

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    4018
                                             55 BANK0      3     3      0
                  _ADC_GetConversion
                        _EUSART_Read
                         _LCD_inicio
                  _SYSTEM_Initialize
                       _SetDDRamAddr
                      _WriteDataXLCD
                             _printf
                             _saludo
 ---------------------------------------------------------------------------------
 (1) _saludo                                               2     2      0     454
                                              6 BANK0      2     2      0
                           _BusyXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
                          _putrsXLCD
 ---------------------------------------------------------------------------------
 (2) _putrsXLCD                                            3     0      3     379
                                              3 BANK0      3     0      3
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (3) _WriteDataXLCD                                        1     1      0      30
                                              2 BANK0      1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _printf                                              10     6      4    3285
                                             45 BANK0     10     6      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) __doprnt                                             30    24      6    3098
                                             24 BANK0     21    15      6
                   Absolute function *
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      45
                                              3 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      30
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              2 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     463
                                              2 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     311
                                             15 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     466
                                              2 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_inicio                                           0     0      0     135
                          _DelayXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             2     2      0      90
                                              6 BANK0      2     2      0
                           _BusyXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCmdXLCD                                         1     1      0      45
                                              3 BANK0      1     1      0
                      _DelayFor18TCY
                       _DelayPORXLCD
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SetDDRamAddr                                         4     4      0      30
                                              2 BANK0      4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _BusyXLCD                                             0     0      0       0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (4) _DelayFor18TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DelayXLCD                                            1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          1     1      0      15
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    5     3      2      22
                                              2 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           2     2      0       0
                                              0 BANK0      2     2      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _EUSART_Read
   _LCD_inicio
     _DelayXLCD
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
         _DelayPORXLCD
     _WriteCmdXLCD
       _DelayFor18TCY
       _DelayPORXLCD
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _SetDDRamAddr
     _DelayFor18TCY
   _WriteDataXLCD
     _DelayFor18TCY
   _printf
     __doprnt
       Absolute function(Fake) *
       ___lldiv *
       ___llmod *
         ___lldiv (ARG)
       ___wmul *
       _isdigit *
       _putch *
         _EUSART_Write
   _saludo
     _BusyXLCD
       _DelayFor18TCY
     _SetDDRamAddr
       _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY
       _DelayPORXLCD
     _putrsXLCD
       _BusyXLCD
         _DelayFor18TCY
       _WriteDataXLCD
         _DelayFor18TCY

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3A      6A       5       66.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      0       0       1        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6A      15        0.0%
DATA                 0      0      6A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Jan 25 01:18:51 2021

                                 l11 1220                                   u65 0F8C  
                ___wmul@multiplicand 0064                      _timer0ReloadVal 00C8  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l213 11DA                                  l310 10CE  
                                l524 0886                                  l594 0E8A  
                                l975 0EF2                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                                  u910 0EC0  
                                u940 0F30                                  u950 0F62  
                                u880 0E4C                                  u947 0F26  
                                u957 0F58                                  u998 06C4  
                        ?_LCD_inicio 0060                         __CFG_BORV$18 000000  
              __size_of_WriteCmdXLCD 0050                                  tosl 000FFD  
                                wreg 000FE8                         __CFG_FOSC$HS 000000  
                       ?_EUSART_Read 0060                         __CFG_LVP$OFF 000000  
                               l2111 0E48                                 l2121 0E7C  
                               l2131 0EBC                                 l2211 0914  
                               l2203 08BE                                 l2109 0E3C  
                               l2213 091A                                 l2205 08F4  
                               l2143 0F06                                 l2311 0D86  
                               l2137 0EE4                                 l2129 0EB0  
                               l1353 10F4                                 l2225 0960  
                               l2241 09AC                                 l2153 068A  
                               l1355 10F8                                 l1339 10BC  
                               l2251 0A14                                 l2227 0966  
                               l2243 09BE                                 l2163 0708  
                               l2323 0DC8                                 l2315 0D96  
                               l2093 1304                                 l2149 0F42  
                               l2271 0B5C                                 l2263 0AA2  
                               l2255 0A48                                 l2247 09EA  
                               l2191 0838                                 l2183 07CE  
                               l2159 06DC                                 l2319 0DB8  
                               l2351 0FE0                                 l2257 0A52  
                               l2193 083E                                 l2169 073A  
                               l2329 0E06                                 l1571 0D24  
                               l1563 0D02                                 l2283 0C30  
                               l2267 0ACC                                 l2195 0844  
                               l2187 0812                                 l2277 0BD6  
                               l2269 0AD6                                 l2189 082C  
                               l1583 0D54                                 l1575 0D34  
                               l1567 0D14                                 l1559 0CF2  
                               l2279 0BE8                                 l2287 0C5A  
                               l2199 084C                                 l1825 1102  
                               l1835 1130                                 l1587 0D64  
                               l1579 0D44                                 STR_1 0683  
                               STR_2 065A                                 STR_3 066A  
                               STR_4 0678                                 STR_6 0649  
                               u1010 07A8                                 u1220 0C6C  
                               u1230 0C8A                                 u1218 0C18  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 u1337 0DF6  
                               u1347 0CB6                                 u1188 0A8C  
                               u1357 0CD0                                 u1367 0CE0  
                               u1377 0CEE                                 u1387 138C  
                               u1397 13A2                                 _WPUB 000F7C  
                               _main 0FCA                      _TMR0_StartTimer 13D0  
                               fsr0h 000FEA                                 indf0 000FEF  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 0001               __size_of_WriteDataXLCD 0044  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0036                        __CFG_IESO$OFF 000000  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000000  
                       _WriteCmdXLCD 1024              __end_of_TMR0_Initialize 1340  
                      ?_EUSART_Write 0060       __size_of_OSCILLATOR_Initialize 000A  
      __end_of_OSCILLATOR_Initialize 13D0                        ?_SetDDRamAddr 0060  
                              ?_main 0060                                _ANSEL 000F7E  
                    __end_of___lldiv 0E9C                                _T0CON 000FD5  
                    __end_of___llmod 0F04                       __CFG_DEBUG$OFF 000000  
                              i2l322 1266                                i2l260 002A  
                              _RCREG 000FAE                                _RCSTA 000FAB  
                              _TMR0H 000FD7                                _TMR0L 000FD6  
                              _SPBRG 000FAF                                _PORTB 000F81  
                    __end_of__doprnt 0C96                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TXREG 000FAD                                _TXSTA 000FAC  
                      __CFG_PWRT$OFF 000000                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                    __end_of_dpowers 0629                      __end_of_isdigit 130C  
                              _putch 13AC                                pclath 000FFA  
                              tablat 000FF5                                ttemp5 0002  
                              ttemp6 0005                                ttemp7 0009  
                              status 000FD8                                wtemp8 0002  
                     __CFG_HFOFST$ON 000000                       __CFG_PBADEN$ON 000000  
                __size_of_LCD_inicio 0018                      __initialization 1358  
                       __end_of_main 1024                     __end_of_BusyXLCD 1234  
                 __size_of_DelayXLCD 0012                       ??_EUSART_Write 0062  
              __size_of_DelayPORXLCD 0016          ?_INTERRUPT_InterruptManager 0060  
                     ??_SetDDRamAddr 0062                     __end_of_OpenXLCD 0D76  
                             ??_main 0097                        __activetblptr 000003  
                      _WriteDataXLCD 1074              __end_of_TMR0_StartTimer 13D4  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                     ___llmod@dividend 006F  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                             ?_putch 0060                               _ANSELH 000F7F  
                             i2l2009 001E                               i2l1821 1296  
                             i2l1813 1272                       __CFG_WDTEN$OFF 000000  
                             i2l1807 1260                               _OSCCON 000FD3  
                             _SPBRGH 000FB0                         _DelayPORXLCD 1384  
                     __CFG_XINST$OFF 000000                               ___wmul 129C  
                     __CFG_STVREN$ON 000000                            ??___lldiv 006A  
                          ??___llmod 0077                  _EUSART_Transmit_ISR 1234  
                          ??__doprnt 007E                     ?_TMR0_Initialize 0060  
                             clear_0 135E                               _saludo 0D76  
                       __doprnt@flag 0083                               _printf 113E  
                       __doprnt@prec 008A                       ?_WriteDataXLCD 0060  
                          ??_isdigit 0062                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8             ADC_GetConversion@channel 0066  
               ?_EUSART_Transmit_ISR 0060        __size_of_INTERRUPT_Initialize 0004  
                  __end_of_DelayXLCD 13AC                 __size_of_EUSART_Read 0042  
                  _SYSTEM_Initialize 130C                           __accesstop 0060  
            __end_of__initialization 1364                   ?_SYSTEM_Initialize 0060  
                      ___rparam_used 000000                  ??_SYSTEM_Initialize 0062  
                      __end_of_putch 13BA                         ??_LCD_inicio 0068  
                         __doprnt@ap 007C                           __doprnt@pb 0078  
                   ?_TMR0_StartTimer 0060            __end_of_SYSTEM_Initialize 1326  
              ??_EUSART_Transmit_ISR 0060               __size_of_DelayFor18TCY 000C  
                            ??_putch 0063                           __pbssBANK0 009A  
                          ?_BusyXLCD 0060                 __end_of_EUSART_Write 10FC  
                    WriteCmdXLCD@cmd 0063                 __end_of_SetDDRamAddr 0FCA  
        __size_of_EUSART_Receive_ISR 0032                            ?_OpenXLCD 0060  
                 __end_of_LCD_inicio 1358                    WriteDataXLCD@data 0062  
                            ?___wmul 0062                      ??_WriteDataXLCD 0062  
                            _BAUDCON 000FB8                              ?_saludo 0060  
                            ?_printf 008D              __size_of_ADC_Initialize 0016  
                      _eusartRxCount 00B2                              _OSCTUNE 000F9B  
                 __size_of_putrsXLCD 0066                           ??_BusyXLCD 0062  
                         ??_OpenXLCD 0066                              __Hparam 0000  
                            __Lparam 0000                        _DelayFor18TCY 13BA  
                            ___lldiv 0E18                      __size_of___wmul 0028  
                            ___llmod 0E9C                         __psmallconst 0600  
                            __doprnt 0688                              __pcinit 1358  
                    putrsXLCD@buffer 0063                              __ramtop 0600  
                    __size_of_saludo 00A2                              __ptext0 0FCA  
                            __ptext1 0D76                              __ptext2 0F04  
                            __ptext3 1074                              __ptext4 113E  
                            __ptext5 0688                              __ptext6 13AC  
                            __ptext7 10B8                              __ptext8 12EA  
                            __ptext9 129C                      __size_of_printf 0040  
                          _T0CONbits 000FD5                    __end_of_hexpowers 0649  
                            _dpowers 0601                _OSCILLATOR_Initialize 13C6  
                            _isdigit 12EA             ??_PIN_MANAGER_Initialize 0062  
         __size_of_SYSTEM_Initialize 001A                        __doprnt@width 0088  
               end_of_initialization 1364                         ftoat_mio@buf 00B7  
                  _EUSART_Initialize 117E                      ___lldiv@divisor 0066  
                    ___lldiv@counter 006E                   ?_EUSART_Initialize 0060  
                          _RCSTAbits 000FAB                              printf@f 008D  
                     ?_DelayFor18TCY 0060                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
                  __end_of_putrsXLCD 0F6A                  ??_EUSART_Initialize 0062  
                          _TRISBbits 000F93                            _TRISCbits 000F94  
              __size_of_EUSART_Write 0044                __size_of_SetDDRamAddr 0060  
          __end_of_EUSART_Initialize 11BE                            _DelayXLCD 139A  
       __end_of_INTERRUPT_Initialize 13D8                       __end_of___wmul 12C4  
                       _EUSART_Write 10B8                       _ADC_Initialize 136E  
             ?_OSCILLATOR_Initialize 0060                         _SetDDRamAddr 0F6A  
                     __end_of_saludo 0E18                       __end_of_printf 117E  
                 SetDDRamAddr@DDaddr 0065                  start_initialization 1358  
           __size_of_TMR0_Initialize 001A      __size_of_PIN_MANAGER_Initialize 0026  
                      ??_EUSART_Read 0062                          putch@txData 0063  
                    ___llmod@divisor 0073                    __size_of_BusyXLCD 003A  
                    ___llmod@counter 0077                           ?_DelayXLCD 0060  
                    ??_DelayFor18TCY 0062                    __size_of_OpenXLCD 00E0  
                           ??___wmul 0066                        ?_WriteCmdXLCD 0060  
                        __doprnt@idx 0082               __end_of_ADC_Initialize 1384  
                        __doprnt@val 0084                     __CFG_LPT1OSC$OFF 000000  
                           ??_saludo 0066                             ??_printf 0091  
        __end_of_EUSART_Transmit_ISR 126A                   main@convertedValue 0097  
                      __pcstackBANK0 0060                         _isdigit$1860 0063  
         __end_of_EUSART_Receive_ISR 129C           __size_of_EUSART_Initialize 0040  
                          __doprnt@c 008C                            __doprnt@f 007A  
                __end_of_EUSART_Read 113E                            __pnvBANK0 00C8  
           __size_of_TMR0_StartTimer 0004               _PIN_MANAGER_Initialize 12C4  
                  __CFG_CCP2MX$PORTC 000000                 EUSART_Read@readValue 0062  
                          __pintcode 0008                       ??_WriteCmdXLCD 0063  
                           ?___lldiv 0062                             ?___llmod 006F  
                    ?_ADC_Initialize 0060                         _eusartRxHead 00B4  
                       _eusartTxHead 00B6                         _eusartRxTail 00B3  
                           ?__doprnt 0078                         _eusartTxTail 00B5  
       ??_INTERRUPT_InterruptManager 0060                __end_of_WriteDataXLCD 10B8  
            _eusartTxBufferRemaining 00C9                          __smallconst 0600  
                           ?_isdigit 0060                            _hexpowers 0629  
                     __size_of_putch 000E                 _INTERRUPT_Initialize 13D4  
                     _eusartRxBuffer 00AA                    ??_TMR0_Initialize 0062  
                     _eusartTxBuffer 009A                       ___wmul@product 0066  
                           _LATAbits 000F89                             _LATBbits 000F8A  
                           _LATCbits 000F8B                          ??_DelayXLCD 0062  
                           _PIE1bits 000F9D                        ?_DelayPORXLCD 0060  
__size_of_INTERRUPT_InterruptManager 002E                             _PIR1bits 000F9E  
                    OpenXLCD@lcdtype 0067                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 0062                            _putrsXLCD 0F04  
                        _EUSART_Read 10FC                          _INTCON2bits 000FF1  
              ?_INTERRUPT_Initialize 0060                             _BusyXLCD 11FA  
                     ??_DelayPORXLCD 0062                             __Hparam0 0000  
                           _OpenXLCD 0C96                             __Lparam0 0000  
                  _ADC_GetConversion 11BE                   __CFG_BOREN$SBORDIS 000000  
            ??_OSCILLATOR_Initialize 0062                   ?_ADC_GetConversion 0062  
                  ??_TMR0_StartTimer 0062                     __size_of___lldiv 0084  
                   __size_of___llmod 0068                     __size_of__doprnt 060E  
                ??_ADC_GetConversion 0064                           ?_putrsXLCD 0063  
                   __size_of_isdigit 0022                             __ptext10 0E9C  
                           __ptext11 0E18                             __ptext20 1340  
                           __ptext12 130C                             __ptext21 0C96  
                           __ptext13 1326                             __ptext22 1024  
                           __ptext14 13D0                             __ptext31 1234  
                           __ptext23 1384                             __ptext15 12C4  
                           __ptext32 126A                             __ptext24 0F6A  
                           __ptext16 13C6                             __ptext33 0000  
                           __ptext25 11FA                             __ptext17 13D4  
                           __ptext26 13BA                             __ptext18 117E  
                           __ptext27 139A                             __ptext19 136E  
                           __ptext28 10FC                             __ptext29 11BE  
               __end_of_WriteCmdXLCD 1074                        __size_of_main 005A  
          __end_of_ADC_GetConversion 11FA                             int$flags 0001  
 __end_of_INTERRUPT_InterruptManager 0036           _INTERRUPT_InterruptManager 0008  
                           main@data 0099                           _LCD_inicio 1340  
                         _INTCONbits 000FF2                             isdigit@c 0064  
             ??_INTERRUPT_Initialize 0062                             intlevel2 0000  
                   ___lldiv@dividend 0062              ?_PIN_MANAGER_Initialize 0060  
                   ??_ADC_Initialize 0062                __end_of_DelayFor18TCY 13C6  
                           printf@ap 0091                             printf@pb 0093  
                 _EUSART_Receive_ISR 126A                  ?_EUSART_Receive_ISR 0060  
               __end_of_DelayPORXLCD 139A                          ??_putrsXLCD 0066  
                   ___lldiv@quotient 006A                      _TMR0_Initialize 1326  
                 EUSART_Write@txData 0062         __size_of_EUSART_Transmit_ISR 0036  
     __end_of_PIN_MANAGER_Initialize 12EA                 ??_EUSART_Receive_ISR 0060  
         __size_of_ADC_GetConversion 003C  
